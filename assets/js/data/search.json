[ { "title": "Creating a Domain Join Account in AD", "url": "/posts/create-domain-join-account/", "categories": "Services, Active Directory", "tags": "windows, domain, security, active directory", "date": "2023-07-17 00:00:00 -0400", "snippet": "Joining a computer to a domain only requires certain permissions to certain places in Active Directory. Since limiting access as much as possible is crucial to Active Directy security, you should o...", "content": "Joining a computer to a domain only requires certain permissions to certain places in Active Directory. Since limiting access as much as possible is crucial to Active Directy security, you should only delegate control to accounts that need it. These would be technician accounts or accounts that are used by programs like SCCM. Here we with cover the proper permissions needed to join/remove a computer from Active Directory (AD).Creating an AccountFirst, either choose an account that already exists, or create one that you will use for joining computers to the domain. We’ll use the account domjoin for this example.Delegate ControlNow that we have an account to delegate control to, we’ll have to apply the appropriate permissions in the right place. By default, all computers that are added to AD go in the Computers container. This is where we’ll delegate control to the domjoin account.In AD Users and Computers, right click on the Computers container and click Delegate Control.Oh the wizard, click Next, then click Add to select the account you wish to delegate control to. In this case, the domjoin account. Once you have your account added, click Next.Select Create a custom task to delegate, then click Next.Select Only the following objects in the folder:, then choose Computer objects. Ensure to check the box for Create selected objects in this folder and Delete selected objects in this folder. Now click Next.Ensure General is checked and choose the following from the list: Reset Password Read and write account restrictions Validated write to DNS host name Validated write to service principal nameThen, click Next.On the final page, review your settings and click Finish.ConclusionNow that you have delegated control to the account on the Computers container, you can use it to add and remove computers on the domain as you normally would." }, { "title": "Connecting to Old SSH Servers", "url": "/posts/connect-old-ssh-server/", "categories": "Services, SSH / SFTP", "tags": "security, ssh, cli, command line, openssh", "date": "2023-07-15 00:00:00 -0400", "snippet": "Unable to negotiate with 192.0.2.1 port 22: no matching key exchange method found. Their offer: diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1Have you com...", "content": "Unable to negotiate with 192.0.2.1 port 22: no matching key exchange method found. Their offer: diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1Have you come across an error like this when trying to SSH into a switch or server? It happens when the SSH server and your SSH client disagree on what algorithms they support. By default, newer versions of OpenSSH don’t support older, less secure algorithms. This becomes a more prevalent problem as SSH clients update to newer versions and your switches and servers remain on older ones.Don’t worry, though. You can enable support for these algorithms in your SSH client configuration for good!Configuration LocationsFirst, lets locate where your SSH client configuration is. This is relatively the same between all operating systems. Windows: C:\\Users\\&lt;username&gt;\\.ssh\\config macOS: /Users/&lt;username&gt;/.ssh/config Linux: /home/&lt;username&gt;/.ssh/configIf this folder and/or file doesn’t exist, you can create them.Windows (cmd.exe)C:\\Users\\cne&gt; mkdir %HOMEPATH\\.sshC:\\Users\\cne&gt; cd %HOMEPATH%\\.sshC:\\Users\\cne\\.ssh&gt; copy NUL configC:\\Users\\cne\\.ssh&gt; notepad configWindows (Powershell)PS C:\\Users\\cne&gt; mkdir ~\\.sshPS C:\\Users\\cne&gt; cd ~\\.sshPS C:\\Users\\cne&gt; New-Item -Path config -ItemType FilePS C:\\Users\\cne&gt; notepad configmacOScne@mcnc ~ % mkdir -m 700 ~/.sshcne@mcnc ~ % cd ~/.sshcne@mcnc .ssh % touch configcne@mcnc .ssh % open configLinuxcne@mcnc:~$ mkdir -m 700 ~/.sshcne@mcnc:~$ cd ~/.sshcne@mcnc:~/.ssh$ touch configcne@mcnc:~/.ssh$ nano configSSH SettingsThere are several errors you may run across while connecting to older SSH servers. The most common settings related to these are KexAlgorithms (key exchange), HostKeyAlgorithms, Ciphers and MACs (message authentication codes).KexAlgorithmsKey echange algorithms are used to exchange the secret key that the SSH server and client will use to encrypt the traffic between them. The error you’ll see is much like this:Unable to negotiate with 192.0.2.1 port 22: no matching key exchange method found. Their offer: diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1The key words here are no matching key exchange method found. The server supports the algorithms listed, which you must enable at least one of to communicate with it. You can do this by copying the offers and placing them in your config file with the configuration name KexAlgorithms and using the + to add them. Do NOT forget the +, or you’ll disable the defaults.KexAlgorithms +diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1You can list all the key exchange algorithms your client supports with ssh -Q kex:C:\\Users\\cne&gt; ssh -Q kexdiffie-hellman-group1-sha1diffie-hellman-group14-sha1diffie-hellman-group14-sha256diffie-hellman-group16-sha512diffie-hellman-group18-sha512diffie-hellman-group...HostKeyAlgorithmsHost key algorithms specify which host key types that the server supports. The typical error looks something like this:Unable to negotiate with 192.0.2.1 port 22: no matching host key type found. Their offer: ssh-rsaThe key words here are no matching host key type found. The server supports the algorithms listed, which you must enable at least one of to communicate with it. You can do this by copying the offers and placing them in your config file with the configuration name HostKeyAlgorithms and using the + to add them. Do NOT forget the +, or you’ll disable the defaults.HostKeyAlgorithms +ssh-rsaYou can list all the host key algorithms your client supports with ssh -Q key:C:\\Users\\cne&gt; ssh -Q keyssh-ed25519ssh-ed25519-cert-v01@openssh.comssh-rsassh-dssecdsa-sha2-nistp256ecdsa-sha2-nistp384ecdsa-sha2-nistp521ssh-rsa-cert...CiphersCiphers are used to actually do the encrypting of the traffic between client and server. An error you would see for ciphers is like this:Unable to negotiate with 192.0.2.1 port 22: no matching cipher found. Their offer: aes256-cbc,aes192-cbc,aes128-cbcThe key words here are no matching cipher found. The server supports the ciphers listed, which you must enable at least one of to communicate with it. You can do this by copying the offers and placing them in your config file with the configuration name Ciphers and using the + to add them. Do NOT forget the +, or you’ll disable the defaults.Ciphers +aes256-cbc,aes192-cbc,aes128-cbcYou can list all the ciphers that your client supports with ssh -Q cipher:C:\\Users\\cne&gt; ssh -Q cipher3des-cbcaes128-cbcaes192-cbcaes256-cbcaes128-ctraes192-ctraes256-ctraes128-gcm...MACsMACs, or message authentication codes, are used to ensure that data hasn’t been tampered with before they reach their intended recipient. A MAC error looks like this:Unable to negotiate with 192.0.2.1 port 22: no matching MAC found. Their offer: hmac-sha1The key words here are no matching MAC found. The server supports the MACs listed, which you must enable at least one of to communicate with it. You can do this by copying the offers and placing them in your config file with the configuration name MACs and using the + to add them. Do NOT forget the +, or you’ll disable the defaults.MACs +hmac-sha1You can list all the MACs that your client supports with ssh -Q mac:C:\\Users\\cne&gt; ssh -Q machmac-sha1hmac-sha1-96hmac-sha2-256hmac-sha2-512hmac-md5hmac-md5-96umac-64@openssh.comumac-128@openssh.comhmac-sha1-etm...ConclusionDepending on how old the server is, you may not have to add each of the settings listed here, but they are the most common. The configuration I have to communicate with the server used in this example looks like this:KexAlgorithms +diffie-hellman-group-exchange-sha1HostKeyAlgorithms +ssh-rsaCiphers +aes256-cbcIf you’d like to use these less secure configurations only on certain servers, you can use Host to list the hosts and/or networks like this:Host 192.0.2.1 192.168.* 172.16.0.* KexAlgorithms +diffie-hellman-group-exchange-sha1 HostKeyAlgorithms +ssh-rsa Ciphers +aes256-cbc" }, { "title": "Publishing Remote Desktop Certificates", "url": "/posts/publish-rdp-certs/", "categories": "Security, Certificates", "tags": "windows, certificate, security, active directory, rdp, remote desktop", "date": "2022-07-04 00:00:00 -0400", "snippet": "While extremely convenient, the Remote Desktop Protocol can be extremely dangerous if not secured correctly. Typical things you should consider are ACLs, firewall rules, smart cards, RDP Gateways, ...", "content": "While extremely convenient, the Remote Desktop Protocol can be extremely dangerous if not secured correctly. Typical things you should consider are ACLs, firewall rules, smart cards, RDP Gateways, jump boxes or even disabling RDP altogether.We’ve all seen the certificate error on connecting to remote systems. RDP uses TLS certificates just like a web site to secure your connection. By default, a Windows device creates its own self-signed certificate to present to clients connecting to it. Since the certificate is not issued by a trusted authority, your workstation won’t trust it. This should be avoided since a threat actor could initiate a man-in-the-middle attack without your knowledge. We can have the devices enroll in an trusted certificate with the Certificate Authority, which will be covered here.Requirements An Active Directory infrastructure A server configured as an Enterprise Active Directory Certificate AuthorityConfigure a Remote Desktop Connection Template Logon to your Enterprise Certificate Authority or a PC with RSAT Tools installed Open the Certificate Authority MMC by clicking the Start Menu and typing certsrv.msc and pressing Enter Click on your CA Server Right-click on Certificate Templates and select Manage In the Certificate Templates Console, right-click on the Computer template and select Duplicate Template On the Compatibility tab, under Certificate Authority choose the closest version to your CA server’s version, and under Certificate recipient choose the oldest version of Windows OS supported in your organization. Click OK on any pop-up windows. On the General tab, enter a name for this template such as RemoteDesktopConnection It is important that you spell this correctly and remember the exact name entered here. This will be used later in a Group Policy Object. On the Cryptography tab, set the Provider Category to Key Storage Provider. Set the Algorithm to ECDH_P256 and the Request hash to SHA256 On the Extensions tab, click Application Policies then click Edit On the Edit Application Policies Extension pop-up, click Client Authentication then click Remove and OK On the Security tab, ensure Domain Computers have Enroll checked under Allow Click Add… Type in Domain Controllers and click OK Ensure Domain Controllers have Enroll checked under Allow On the Subject Name tab, set the Subject name format to Common Name Click OK Close the Certificate Templates ConsolePublish the Certificate Template on the CA In the Certificate Authority MMC, right-click on Certificate Templates and select New &gt; Certificate Template to Issue On the Enable Certificate Templates pop-up, choose RemoteDesktopConnection and click OK Close the Certificate Authority MMCConfigure the Remote Destop Certificate Group Policy Object Logon to your Domain Controller or a PC with RSAT Tools installed Open the Group Policy Management MMC by clicking the Start Menu and typing gpmc.msc and pressing Enter Browse to the Default Domain Policy or create a new policy at the top of the domain Right-click Default Domain Policy, or the policy you created, and select Edit In the Group Policy Management Editor, browse to Computer &gt; Policies &gt; Administrative Templates &gt; Windows Components &gt; Remote Desktop Services &gt; Remote Desktop Session Host &gt; Security Double-click Server authentication certificate template Click Enable Under Certificate Template Name enter the template name you used earlier, in this case RemoteDesktopConnection Click OK Close the Group Policy Management Editor and Group Policy Management windows Once domain devices perform Group Policy updates, they will automatically enroll with this new RDP certificate. Afterwards, all domain devices will trust the certificates presented by other domain-joined machines." }, { "title": "Creating an Enterprise Subordinate CA from an Offline Root CA", "url": "/posts/enterprise-sub-ca/", "categories": "Services, Certificate Authorities", "tags": "windows, certificate, security, active directory", "date": "2022-07-04 00:00:00 -0400", "snippet": "Every organization that has an Active Directory structure, or any other service that uses SSL/TLS services (ie. HTTPS, RDP, etc.), should have a certificate authority. This certificate authority is...", "content": "Every organization that has an Active Directory structure, or any other service that uses SSL/TLS services (ie. HTTPS, RDP, etc.), should have a certificate authority. This certificate authority is used to verify that you are indeed talking directly with the server you think you are and that the connection is secure. Having a certificate authority is also required to enable secure LDAP (LDAPS), though this can also be done with an external certificate authority.This guide covers the second part of a two-tiered certificate authority (CA) setup, which is the Enterprise Subordinate or Intermiediate CA. The Enterprise CA is a Active Directory domain-joined server. This CA will be online and will issue certificates on behalf of the offline CA, which is protected off-network.Requirements Windows Server joined to your Active Directory domain The server should be fully updated before starting This server should have a static IP address We will be using Windows Server 2022 for this example An offline Root CA This can either be Linux or Windows-based and is covered elsewhere on this site (Recommended) Private Enterprise Number or OID to represent your organization One of these numbers can be obtained at no cost from IANA, here: IANA PEN Application Form You can check the registry to see if your organization has already obtained one, here: IANA PEN Registry Create CAPolicy.inf File Open Powershell as Administrator Create a new file with notepad.exe called CAPolicy.inf in C:\\Windows cd C:\\Windowsnotepad.exe CAPolicy.inf Answer Yes to create the new file Copy this text into the file [Version]Signature=\"$Windows NT$\"[PolicyStatementExtension]Policies=InternalPolicy[InternalPolicy]OID=1.2.3.4.1455.67.89.5[Certsrv_Server]RenewalKeyLength=4096RenewalValidityPeriod=YearsRenewalValidityPeriodUnits=10CRLPeriod=weeksCRLPeriodUnits=1LoadDefaultTemplates=1AlternateSignatureAlgorithm=1[CRLDistributionPoint][AuthorityInformationAccess] The OID listed above is an example by Microsoft. You should use one from IANA as mentioned in the Requirements section above. Notice that LoadDefaultTemplates is set to 0, this will prevent unwanted or unneeded certificates from being issued after the install. Save and close the CAPolicy.inf filePublish the Root CA Certificate and CRLThese two files were generated when you create either you Linux or Windows offline CA. You should have stored these files on a USB drive so that you can now import them into Active Directory. The Root CA Certificate should have a .crt file extension The Root CA Certificate revocation list (CRL) should have a .crl file extension Open Powershell as Administrator Assuming the CA cert and CRL files are on the root of E:, publish Root CA Certificate and CRL in Active Directory certutil -f -dspublish \"E:\\Root-CA_Example Root CA.crt\" RootCAcertutil -f -dspublish \"E:\\Example Root CA.crl\" RootCA Add the Root CA Certificate and CRL in this server’s local store certutil -addstore -f root \"E:\\Root-CA_Example Root CA.crt\"certutil -addstore -f root \"E:\\Example Root CA.crl\" Install the Active Directory Certificate Services Role Open Server Manager, if not already open Click Manage in the top right corner Click Add Roles and Features On Before You Begin, click Next On Installation Type, ensure Role-based or feature-based installation is selected and click Next On Server Selection, ensure this server is selected and click Next On Server Roles, check Active Directory Certificate Services, on the pop-up click Add Features, then click Next On Features, click Next On AD CS, click Next On Role Services, check Cerificate Authority and Certificate Authority Web Enrollment, on the pop-up click Add Features, then click Next On Web Server Role (IIS), click Next On Role Services, click Next On Confirmation, click InstallConfigure the Certificate Authority Service If the Installation Wizard is still open, click Configure Active Directory Certificate Services on the destination server. Otherwise, in Server Manager click the flag icon in the upper right which should have a warning symbol (⚠️), then Post-deployment Configuration On Credentials, click Next On Role Services, check Certification Authority and Certificate Authority Web Enrollment, then click Next On Setup Type, ensure Enterprise CA is selected then click Next On CA Type, select Subordinate CA and click Next On Private Key, ensure Create a new private key is selected, then click Next On Cryptography, set the Key length to 4096 On CA Name, set the Common name to a descriptive value, such as “Contoso Subordinate CA”. You may either accept the pre-filled Distinguished name or provide your own, such as O=Example School,L=Raleigh,ST=North Carolina,C=US then click Next On Certificate Request, note the path in the File name field. This is where the certificate request file will be saved. Click Next On Certificate Database, click Next On Confirmation, click Configure Once the installation is finished, close the wizard. The warning message is expected. This is to inform you that you must manually use the .req file to request a CA certificate from your offline Root CA. You should now copy this file to a USB drive to load onto your offline Root CA. Request a CA Certificate from the Offline Root CANow that you have a certificate request, you must use your offline Root CA to obtain the Subordinate CA certificate.Linux-based Offline CA Insert your USB drive containing the .req file into the offline Root CA server Find the path to your device (all devices in Linux are represented by files) sudo sfdisk -l -l List all devices My device was /dev/sdb1 Disk /dev/sdb: 7.52 GiB, 8058306560 bytes, 15738880 sectors Disk model: USB Disk Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: gpt Disk identifier: 730CBDED-473E-4991-9AF8-A6910A72F498 Device Start End Sectors Size Type /dev/sdb1 2048 15736831 15734784 7.5G Microsoft basic data Mount the USB Drive to the /media directory sudo mount /dev/sdb1 /media Generate the Sub-CA Certificate using OpenSSL sudo openssl ca -config /etc/ssl/root-ca/openssl.cnf -extensions v3_intermediate_ca -in /media/CA01.ad.example.edu_ad-CAS-CA.req -out /media/CA01.ad.example.edu_ad-CAS-CA.crt -days 3650 -notext ca This is a Certificate Authority operation -config The location of the OpenSSL configuration file to use -extentions The certificate extensions to use, as defined in the config file -in The location of the .req file from the Subordinate CA -out Location and name of the output .crt certificate for the Sub-CA -days How long the certificate will be valid, 10 years in this case -notext Do not include a text version of the certificate in the output You will be asked for the password of the Root CA’s private key, which you should have documented Using configuration from /etc/ssl/root-ca/openssl.cnfEnter pass phrase for /etc/ssl/root-ca/private/ca.key: You will be asked to verify the request and signature. If this looks correct, answer y to both questions. Below is my example: Enter pass phrase for /etc/ssl/root-ca/private/ca.key:Check that the request matches the signatureSignature okCertificate Details: Serial Number: 60:1c:cb:4e:95:f9:4b:2f:42:30:e6:fe:0a:bb:6a:2f Validity Not Before: Jul 5 18:00:58 2022 GMT Not After : Jul 2 18:00:58 2032 GMT Subject: countryName = US stateOrProvinceName = North Carolina localityName = RTP organizationName = MCNC organizationalUnitName = CNE commonName = MCNC Subordinate CA X509v3 extensions: X509v3 Subject Key Identifier: 2A:69:D8:FB:5E:9E:2C:B4:B3:06:29:52:01:0B:5A:6E:E3:18:2C:55 X509v3 Authority Key Identifier: 46:E7:C6:7A:74:1E:10:56:94:CC:39:22:FD:87:3F:AD:E0:EF:8E:D5 X509v3 Basic Constraints: critical CA:TRUE, pathlen:0 X509v3 Key Usage: critical Digital Signature, Certificate Sign, CRL SignCertificate is to be certified until Jul 2 18:00:58 2032 GMT (3650 days)Sign the certificate? [y/n]:y1 out of 1 certificate requests certified, commit? [y/n]yWrite out database with 1 new entriesData Base Updated Unmount the USB drive before removing it sudo umount /media Shutdown the offline Root CAWindows-based Offline CA Insert your USB drive into the offline Windows Root CA server On the offline Windows Root CA server, open the Certificate Authority MMC by going to Tools &gt; Certificate Authority in Server Manager or by running certsrv.msc In the Certificate Authority MMC, right-click your Root CA, then select All Tasks &gt; Submit New request… Browse to your .req file and click Open Double click on Pending Requests you should see your new request listed Right-click on the request and select All Tasks &gt; Issue You should see the new certificate under Issued Certificates and note the Request ID for the next step Open Powershell as Administrator and export the new Sub-CA certificate to your USB drive certreq -retrieve 2 \"E:\\CA01.ad.example.edu_ad-CAS-CA.crt\" -retrieve This is the number of the Request ID from the Issued Certificates container Click OK on the Certificate Authority List pop-up Safely eject and remove the USB drive from the server Shutdown the offline Root CAInstall the new Sub-CA Certificate on the Enterprise Subordinate CA Insert your USB drive into the offline Windows Root CA server On the Windows Enterprise Subordinate CA server, open the Certificate Authority MMC by going to Tools &gt; Certificate Authority in Server Manager or by running certsrv.msc In the Certificate Authority MMC, right-click your Subordinate CA, then select All Tasks &gt; Install CA Certificate… Change the File type dropdown to X.509 Certificate (*.cer,*.crt) Browse to your USB drive or location of the .crt file from the Root CA and select it Click Open Right-click right-click your Subordinate CA and select All Tasks &gt; Start Service Certificate Services should have started and a green check should be on you Subordinate CA Perform Post Installation Configuration Tasks on the Subordinate Issuing CA Open Powershell as Administrator Configure the CRL and Delta CRL settings certutil -setreg CA\\CRLPeriodUnits 1certutil -setreg CA\\CRLPeriod \"Weeks\"certutil -setreg CA\\CRLDeltaPeriodUnits 1certutil -setreg CA\\CRLDeltaPeriod \"Days\" Define CRL overlap settings certutil -setreg CA\\CRLOverlapPeriodUnits 12certutil -setreg CA\\CRLOverlapPeriod \"Hours\" Set the Validity Period to half the life of the Subordinate CA certificate. In this case, 5 years. The default is 2 years certutil -setreg CA\\ValidityPeriodUnits 5certutil -setreg CA\\ValidityPeriod \"Years\" Retart the Certificate Authority service Restart-Service certsvc Generate the Certificate Revocation List certutil -crl (Recommended) Publish the Domain Controller Certificate Template In the Certificate Authority MMC of the Subordinate CA, right click on Certificate Templates and select New &gt; Certificate Template to Issue On the Enable Certificate Templates pop-up, select Domain Controller and click OK After some time (gpupdate), the Domain Controllers will enroll themselves with a certificate which will enable LDAPS (port 636) " }, { "title": "Offline Root Certificate Authority - Windows Server", "url": "/posts/offline-windows-ca/", "categories": "Services, Certificate Authorities", "tags": "windows, certificate, security", "date": "2022-07-03 00:00:00 -0400", "snippet": "Every organization that has an Active Directory structure, or any other service that uses SSL/TLS services (ie. HTTPS, RDP, etc.), should have a certificate authority. This certificate authority is...", "content": "Every organization that has an Active Directory structure, or any other service that uses SSL/TLS services (ie. HTTPS, RDP, etc.), should have a certificate authority. This certificate authority is used to verify that you are indeed talking directly with the server you think you are and that the connection is secure. Having a certificate authority is also required to enable secure LDAP (LDAPS), though this can also be done with an external certificate authority.Choosing to host your offline root CA on a Windows-based system, rather than Linux, will feel more comfortable to those who are not familiar to Linux. However, since this server will be shutdown 99% of the time and should never be on the network once configured, it may seem like a waste of a server license.Why have an offline Root CA? If a root CA is in some way compromised (broken into, hacked, stolen, or accessed by an unauthorized or malicious person), then all of the certificates that were issued by that CA are also compromised. Since certificates are used for data protection, identification, and authorization, the compromise of a CA could compromise the security of an entire organizational network. For that reason, many organizations that run internal PKIs install their root CA offline. That is, the CA is never connected to the company network, which makes the root CA an offline root CA. Make sure that you keep all CAs in secure areas with limited access.1 – Microsoft TechNetRequirements Latest Windows Server available installed on a single-purpose physical server You will need to be able to transfer files to and from this device via USB drive. We’ll be using Windows Server 2022 for this example. This system will be used as an offline root CA, therefore it will be powered off after we’re done. USB drive formatted with ExFAT or FAT32 file systemEnsure the Server is Updated Update the server with Windows Update At this point, there is no need for the server to be connected to the network. You should remove the network cable from the ethernet port. If this is a device with a wireless card, ensure it is not connected to the wireless or even remove the WLAN card.Create CAPolicy.inf File Open Powershell as Administrator Create a new file with notepad.exe called CAPolicy.inf in C:\\Windows cd C:\\Windowsnotepad.exe CAPolicy.inf Answer Yes to create the new file Copy this text into the file [Version]Signature=\"$Windows NT$\"[Certsrv_Server]RenewalKeyLength=4096RenewalValidityPeriod=YearsRenewalValidityPeriodUnits=20AlternateSignatureAlgorithm=1 Save and close the CAPolicy.inf fileInstall the Active Directory Certificate Services Role Open Server Manager, if not already open Click Manage in the top right corner Click Add Roles and Features On Before You Begin, click Next On Installation Type, ensure Role-based or feature-based installation is selected and click Next On Server Selection, ensure this server is selected and click Next On Server Roles, check Active Directory Certificate Services, on the pop-up click Add Features, then click Next On Features, click Next On AD CS, click Next On Role Services, ensure Cerificate Authority is checked and click Next On Confirmation, click InstallConfigure the Certificate Authority Service If the Installation Wizard is still open, click Configure Active Directory Certificate Services on the destination server. Otherwise, in Server Manager click the flag icon in the upper right which should have a warning symbol (⚠️), then Post-deployment Configuration On Credentials, click Next On Role Services, check Certification Authority, then click Next On Setup Type, click Next (Standalone CA is the only available option) On CA Type, select Root CA and click Next On Private Key, ensure Create a new private key is selected, then click Next On Cryptography, set the Key length to 4096 On CA Name, set the Common name to a descriptive value, such as “Contoso Root CA”, then click Next On Validity Period, set the validity period to 20 Years. On Certificate Database, click Next On Confirmation, click ConfigurePerform Post Installation Configuration Open Powershell ad Administrator Define the Active Directory Configuration Partition Distinguished Name (Substitute your DC values) certutil -setreg CA\\DSConfigDN \"CN=Configuration,DC=ad,DC=example,DC=edu\" Define CRL Period Units and CRL Period certutil -setreg CA\\CRLPeriodUnits 52certutil -setreg CA\\CRLPeriod \"Weeks\"certutil -setreg CA\\CRLDeltaPeriodUnits 0 Define CRL Overlap Period Units and CRL Overlap Period certutil -setreg CA\\CRLOverlapPeriodUnits 12certutil -setreg CA\\CRLOverlapPeriod \"Hours\" Define Validity Period Units for all issued certificates by this CA certutil -setreg CA\\ValidityPeriodUnits 10certutil -setreg CA\\ValidityPeriod \"Years\" Restart the Certificate Authority Service and Publish the CRL Restart the CA service Restart-Service certsvc Publish the Certificate Revocation List (CRL) certutil -crl Copy the Root CA Certificate and CRL to USB DriveYou should now copy *.crl and *.crt to a USB drive. The two files can be found at C:\\Windows\\system32\\CertSrv\\CertEnroll. You will need the root CA certificate and CRL file when you configure the Windows Enterprise Subordinate CAShutdown and Store the MachineYou may now shutdown the server and store it. The only times the server will be needed are when you stand up a new subordinate (intermediate) certificate authority, or when a sub-CA needs its certificate renewed. Sub-CA’s should renew their certificates every ten years or so.Footnotes https://social.technet.microsoft.com/wiki/contents/articles/2900.offline-root-certification-authority-ca.aspx &#8617; " }, { "title": "Offline Root Certificate Authority - Linux", "url": "/posts/offline-linux-ca/", "categories": "Services, Certificate Authorities", "tags": "linux, certificate, security", "date": "2022-07-03 00:00:00 -0400", "snippet": "Every organization that has an Active Directory structure, or any other service that uses SSL/TLS services (ie. HTTPS, RDP, etc.), should have a certificate authority. This certificate authority is...", "content": "Every organization that has an Active Directory structure, or any other service that uses SSL/TLS services (ie. HTTPS, RDP, etc.), should have a certificate authority. This certificate authority is used to verify that you are indeed talking directly with the server you think you are and that the connection is secure. Having a certificate authority is also required to enable secure LDAP (LDAPS), though this can also be done with an external certificate authority.Choosing to host your offline root CA on a Linux-based system, rather than Windows Server, will save you from licensing a server that will rarely be turned on.Why have an offline Root CA? If a root CA is in some way compromised (broken into, hacked, stolen, or accessed by an unauthorized or malicious person), then all of the certificates that were issued by that CA are also compromised. Since certificates are used for data protection, identification, and authorization, the compromise of a CA could compromise the security of an entire organizational network. For that reason, many organizations that run internal PKIs install their root CA offline. That is, the CA is never connected to the company network, which makes the root CA an offline root CA. Make sure that you keep all CAs in secure areas with limited access.1 – Microsoft TechNetSystem Requirements Linux-based, single-purpose physical server You will need to be able to transfer files to and from this device via USB drive. We’ll be using Ubuntu 22.04 LTS Server for this example. This system will be used as an offline root CA, therefore it will be powered off after we’re done. USB drive formatted with ExFAT or FAT32 file systemEnsure OpenSSL is Installed Update the server sudo apt update &amp;&amp; sudo apt dist-upgrade -y Install OpenSSL (likely already installed) sudo apt install -y openssl At this point, there is no need for the server to be connected to the network. You should remove the network cable from the ethernet port. If this is a device with a wireless card, ensure it is not connected to the wireless or even remove the WLAN card.Create Certificate Authority Directory Structure Create all directories that will be needed cd /etc/sslsudo mkdir -p root-ca/{private,newcerts,certs,crl,csr}sudo chmod 700 root-ca/private -p Create the parent directories if they don’t exist 700 Set the permissions so that only the file owner can read/write (rwx------) Create needed database files cd root-casudo openssl rand -out serial -hex 16sudo openssl rand -out crlnumber -hex 16sudo touch index Create the configuration filesudo echo '[ca]#/etc/ssl/root-ca/openssl.cnf#see man cadefault_ca = CA_default[CA_default]dir = /etc/ssl/root-cacerts = $dir/certscrl_dir = $dir/crlnew_certs_dir = $dir/newcertsdatabase = $dir/indexserial = $dir/serialRANDFILE = $dir/private/.randprivate_key = $dir/private/ca.keycertificate = $dir/certs/ca.crtcrlnumber = $dir/crlnumbercrl = $dir/crl/ca.crlcrl_extensions = crl_extdefault_crl_days = 397default_md = sha256name_opt = ca_defaultcert_opt = ca_defaultdefault_days = 397preserve = nopolicy = policy_loose[ policy_strict ]countryName = matchstateOrProvinceName = matchorganizationName = matchorganizationalUnitName = optionalcommonName = suppliedemailAddress = optional[ policy_loose ]countryName = optionalstateOrProvinceName = optionallocalityName = optionalorganizationName = optionalorganizationalUnitName = optionalcommonName = suppliedemailAddress = optional[ req ]# Options for the req tool, man req.default_bits = 2048distinguished_name = req_distinguished_namestring_mask = utf8onlydefault_md = sha256# Extension to add when the -x509 option is used.x509_extensions = v3_ca[ req_distinguished_name ]countryName = Country Name (2 letter code)stateOrProvinceName = State or Province NamelocalityName = Locality Name (City or Town)0.organizationName = Organization Name (Company Name)organizationalUnitName = Organizational Unit Name (Department)commonName = Common Name (Descriptive Name)emailAddress = Email Address[ v3_ca ]# Extensions to apply when createing root ca# Extensions for a typical CA, man x509v3_configsubjectKeyIdentifier = hashauthorityKeyIdentifier = keyid:always,issuerbasicConstraints = critical, CA:truekeyUsage = critical, digitalSignature, cRLSign, keyCertSign[ v3_intermediate_ca ]# Extensions to apply when creating intermediate or sub-ca# Extensions for a typical intermediate CA, same man as abovesubjectKeyIdentifier = hashauthorityKeyIdentifier = keyid:always,issuer# pathlen:0 ensures no more sub-ca can be created below an intermediatebasicConstraints = critical, CA:true, pathlen:0keyUsage = critical, digitalSignature, cRLSign, keyCertSign[ server_cert ]# Extensions for server certificatesbasicConstraints = CA:FALSEnsCertType = servernsComment = \"OpenSSL Generated Server Certificate\"subjectKeyIdentifier = hashauthorityKeyIdentifier = keyid,issuer:alwayskeyUsage = critical, digitalSignature, keyEnciphermentextendedKeyUsage = serverAuth[ crl_ext ]# CRL extensions.# Only issuerAltName and authorityKeyIdentifier make any sense in a CRL.authorityKeyIdentifier=keyid:always' | sudo tee openssl.cnfCreate the Root CA Certificate Generate the new private key and certificate for the root CA sudo openssl req -new -newkey rsa:4096 -x509 -config /etc/ssl/root-ca/openssl.cnf -extensions v3_ca -days 7300 -out certs/ca.crt -keyout private/ca.key req This is a certificate request -new This is a new request for a certificate -newkey The new private key will be a 4096-bit RSA key -x509 Generate a certificate (self-signed) instead of a certificate request -config Location of the config file to use -extensions Name of the extention to use (defined in the config file) -days Length of certificate life in days (7300 days = 20 years) -out Location of the new root CA certificate file -keyout Location of the private key file for the root CA (Keep this safe!) Provide a password for the new root CA key (document this) and provide DN information. Only the Common Name field is required, but all are recommended. Enter PEM pass phrase:Verifying - Enter PEM pass phrase:-----You are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter '.', the field will be left blank.-----Country Name (2 letter code) []:USState or Province Name []:Full State NameLocality Name (City or Town) []:Your cityOrganization Name (Company Name) []:Your Organization NameOrganizational Unit Name (Department) []:Your Department NameCommon Name (Descriptive Name) []:Your Org Root CAEmail Address []: Do not lose the ca.key file or the password to it Review the certificate you’ve created. openssl x509 -in certs/ca.crt -text -noout x509 This is a x509 certificate operation -in The certficate file we’re examining -text Display the certificate in text form -noout Don’t display the certificate in base64 form The output of the above command should look similar to this: Certificate: Data: Version: 3 (0x2) Serial Number: 2b:06:96:df:af:57:e8:c4:5e:74:0a:fc:24:c4:da:88:ae:42:21:a3 Signature Algorithm: sha256WithRSAEncryption Issuer: C = US, ST = North Carolina, L = RTP, O = MCNC, OU = CNE, CN = MCNC Root CA Validity Not Before: Jul 3 22:43:56 2022 GMT Not After : Jun 28 22:43:56 2042 GMT Subject: C = US, ST = North Carolina, L = RTP, O = MCNC, OU = CNE, CN = MCNC Root CA Subject Public Key Info: Public Key Algorithm: rsaEncryption Public-Key: (4096 bit) Modulus: 00:9c:2b:3f:e5:02:ee:4c:f4:ba:61:07:f0:63:a7: f7:30:26:5f:32:af:c8:38:20:93:1d:62:35:98:5e: 20:d4:17:e1:3f:db:86:c8:99:e3:69:75:1c:d2:99: ... Generate the Certificate Revocation List Create the CRL and sign it using the root CA private sudo openssl ca -config /etc/ssl/root-ca/openssl.cnf -gencrl -out crl/ca.crl ca This CA operation -config Location of the config file to use -gencrl Generate a certificate revocation list signed by the private key -out File to save the CRL to You will be asked to provide the password for the root CA private key Using configuration from /etc/ssl/root-ca/openssl.cnfEnter pass phrase for /etc/ssl/root-ca/private/ca.key: Copy the Root CA Certificate and CRL from the Server Insert your USB drive Find the path to your device (all devices in Linux are represented by files) sudo sfdisk -l -l List all devices My device was /dev/sdb1 Disk /dev/sdb: 7.52 GiB, 8058306560 bytes, 15738880 sectors Disk model: USB Disk Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: gpt Disk identifier: 730CBDED-473E-4991-9AF8-A6910A72F498 Device Start End Sectors Size Type /dev/sdb1 2048 15736831 15734784 7.5G Microsoft basic data Mount the USB Drive to the /media directory sudo mount /dev/sdb1 /media Copy the root CA certificate and CRL to the drive sudo cp /etc/ssl/root-ca/certs/ca.crt /etc/ssl/root-ca/crl/ca.crl /media Unmount the USB drive before removing it sudo umount /media If creating a Windows Enterprise Subordinate CA, you will need both the ca.crl and ca.crt files to import into Active Directory Shutdown and Store the MachineYou may now shutdown the server and store it. The only times the server will be needed are when you stand up a new subordinate (intermediate) certificate authority, or when a sub-CA needs its certificate renewed. Sub-CA’s should renew their certificates every ten years or so.Footnotes https://social.technet.microsoft.com/wiki/contents/articles/2900.offline-root-certification-authority-ca.aspx &#8617; " }, { "title": "Linux-based SFTP Server", "url": "/posts/linux-based-sftp-server/", "categories": "Services, SSH / SFTP", "tags": "networking, ssh, linux, sftp, security", "date": "2022-07-01 00:00:00 -0400", "snippet": "This guide demonstrates the precedure for creating a Linux-based SFTP server using OpenSSH. The end result is an SFTP server only available to the “sftpusers” group via sftp only. SSH shell access ...", "content": "This guide demonstrates the precedure for creating a Linux-based SFTP server using OpenSSH. The end result is an SFTP server only available to the “sftpusers” group via sftp only. SSH shell access will only be available to users outside of that group. Also, internet-based devices will require an SSH key to login to a shell.System Requirements Any Linux distribution will suffice,but we’ll be using Ubuntu 22.04 LTS Server A careful eye on security Recommendations, in case of compromise Do not tie the server to the Active Directory for authentication If the server is exposed to the internet, keep it in a DMZ Do not use the server for other purposes Ensure OpenSSH Server is Installed Enter the following commands sudo apt update &amp;&amp; sudo apt dist-upgrade -ysudo apt install openssh-server -y Create SFTP Users Add local group named ‘sftpusers’ sudo addgroup sftpusers Add local user account for service (eg. ‘Powerschool’) and add user to ‘sftpusers’ group sudo adduser --home /powerschool --no-create-home --ingroup sftpusers --shell /usr/sbin/nologin powerschool --home Location of the user’s home directory. This is relative to the path of the root directory for SFTP users that we will set later. --no-create-home Do not create the home directory. This is because it will actually exist elsewhere. (You’ll see) --ingroup This is the group the user will be added to. --shell The shell to be used by the user. The SFTP users will not have access to a shell, therefore they are given nologin. powershell This is the name of the user you wish to create. Create SFTP Directory Structure Create the “chroot” folder for the SFTP users sudo mkdir -m 751 /sftp Create the folder to be used by the user we created and set the ownership sudo mkdir -m 700 /sftp/powerschoolsudo chown powerschool:sftpusers /sftp/powerschool Configure OpenSSH Service Make a backup of the SSH config file cd /etc/sshsudo mv sshd_config sshd_config.bak Create a new config filesudo echo 'HostKey /etc/ssh/ssh_host_rsa_keyHostKey /etc/ssh/ssh_host_ed25519_key# Set this to \"yes\" to allow logins to shell from the internet without an SSH keyPasswordAuthentication noPubkeyAuthentication yesPermitRootLogin prohibit-passwordAllowAgentForwarding noAllowTcpForwarding noGatewayPorts noX11Forwarding noPermitTunnel noDisableForwarding yesSubsystem sftp internal-sftpMatch Group sftpusers # Set this to \"no\" to require SSH key for SFTP users PasswordAuthentication yes ForceCommand internal-sftp ChrootDirectory /sftp DisableForwarding yes PermitTunnel noMatch Address 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16 # Set this to \"no\" to require SSH key to login from local nets PasswordAuthentication yes' | sudo tee sshd_configRestart OpenSSH Service With the new config file in place, restart the sshd service sudo systemctl restart sshd Test SSH Connection (should fail) Verify you are not able to connect to the server from another machine via ssh with any user account ssh &lt;useraccount&gt;@&lt;newserverip&gt; Test SFTP Connection (should work) Use sftp to connect to the server (you can also use WinSCP of Filezilla) sftp &lt;useraccount&gt;@&lt;newserverip&gt; Once connected, verify you cannot change to a higher directory cd .., for example, should return “Permission denied” Ensure a Safe Environment Edit the local firewall to only allow certain hosts/networks to port 22 If allowing access from the internet, edit the internet firewall ACLs to only allow traffic in from trusted IP addresses on port 22" }, { "title": "GnuPG - Encrypting Files with a Public Key", "url": "/posts/gpg-public-key/", "categories": "Security, Encryption", "tags": "security, gpg, gnupg, pgp, encryption", "date": "2022-02-08 23:00:00 -0500", "snippet": "Encrypting files or data with a public key is called asymmetric encryption. The benefit to this method is the extra security of encrypting data for a specific recipient. This is done by using the p...", "content": "Encrypting files or data with a public key is called asymmetric encryption. The benefit to this method is the extra security of encrypting data for a specific recipient. This is done by using the person’s public key to encrypt the data, which they then decrypt with their private key that only they have access to. Using this method, you do not have to exchange a password which could compromise the confidential data.Public keys are kept in a keyring on your computer so that you can easily use them again and again. You can also create your own keypair to share your public key with others and receive encypted data, as well as use your private key to sign data so people know the data came from you.Here, we’ll walk through encrypting and decrypting data using public key encryption in GnuPG.Obtaining Public KeysYou can obtain someone’s public key by any of the typical means including, email, external drive or even physical paper. Sending this key in plaintext is perfectly safe, which is why it is called the public key. You import a key using a couple different methods.If someone shares the key file with you, you can use the --import option in gpg.~ $ gpg --import myfriend.ascgpg: key D5A4CF5ABE861374: public key \"Christopher Lovett &lt;clovett@mailbox.mcnc.org&gt;\" importedgpg: Total number processed: 1gpg: imported: 1~ $ gpg -k D5A4CF5ABE861374pub ed25519/D5A4CF5ABE861374 2021-01-17 [C] [expires: 2023-11-13] Key fingerprint = 764F 8DCD BAF1 8D49 7717 88AD D5A4 CF5A BE86 1374uid [ultimate] Christopher Lovett &lt;clovett@mailbox.mcnc.org&gt;uid [ultimate] Christopher Lovett &lt;clovett@mcnc.org&gt;sub rsa4096/5BBCA0B2FFC0B65D 2021-01-21 [S] [expires: 2022-05-12]sub rsa4096/DE1D6F0A38429A0B 2021-01-21 [E] [expires: 2022-05-12]sub rsa4096/5F950E2EA7D452E4 2021-01-21 [A] [expires: 2022-05-12]If the person has stored their key on a keyserver, like I have at https://keys.openpgp.org/, you may import the key directly within the gpg tool.~ $ gpg --keyserver hkps://keys.openpgp.org --search-key clovett@mcnc.orggpg: data source: https://keys.openpgp.org:443(1) Christopher Lovett &lt;clovett@mailbox.mcnc.org&gt; Christopher Lovett &lt;clovett@mcnc.org&gt; 256 bit EDDSA key D5A4CF5ABE861374, created: 2021-01-17Keys 1-1 of 1 for \"clovett@mcnc.org\". Enter number(s), N)ext, or Q)uit &gt; 1 # Enter the number of the key you wish to importgpg: key D5A4CF5ABE861374: public key \"Christopher Lovett &lt;clovett@mailbox.mcnc.org&gt;\" importedgpg: Total number processed: 1gpg: imported: 1Encrypting a FileGnuPG can only encrypt one file at a time, so if you have many files to send, you’ll want to zip or tar them first. If you’re sending a single file, then this is not necessary. Lets say you have a batch of employee data that needs to be sent or stored, for example. Use the tool of your choosing to aggregate the data into a single file (eg. mybulkdata.zip). Next, use gpg with option -e to encrypt the data. We’ll use a few more options as well. -e or --encrypt tells gpg to encrypt with the public key given with name. -r name or --recipient name will encrypt for user id name. If this option is not specified, GnuPG asks for the user-id. This is the id associated with the public key of the recipient.~ $ gpg -e -r clovett@mcnc.org mybulkdata.zip# You may receive this warning. This is because you haven't signed the recipient's# public key. If you are sure this is the correct key, you can answer 'y'.gpg: DE1D6F0A38429A0B: There is no assurance this key belongs to the named usersub rsa4096/DE1D6F0A38429A0B 2021-01-21 Christopher Lovett &lt;clovett@mailbox.mcnc.org&gt; Primary key fingerprint: 764F 8DCD BAF1 8D49 7717 88AD D5A4 CF5A BE86 1374 Subkey fingerprint: 4D81 E207 C4B1 6C69 968B 4108 DE1D 6F0A 3842 9A0BIt is NOT certain that the key belongs to the person namedin the user ID. If you *really* know what you are doing,you may answer the next question with yes.Use this key anyway? (y/N) y # Answer 'y' here if you're sure this is the correct key~ $ ls mybulkdata.zip*-rw-r--r-- 1 user 385788673 mybulkdata.zip-rw-r--r-- 1 user 385788781 mybulkdata.zip.gpgYou can now store or send this confidential data and the recipient can decrypt the file with their private key.Encrypting a Short MessageWith GnuPG, you can encypt a message without ever writing the data to disk in plaintext. To do so, we’ll use the -o file, -e, -a and -r name options. -o file or --output file is used to send output to file. -e or --encrypt tells gpg to encrypt with the public key given with name. -a or --armor to create ASCII armored output. The default is to create the binary OpenPGP format. This is optional, but the output can be easily copy-pasted to email or instant message. -r name or --recipient name will encrypt for user id name. If this option is not specified, GnuPG asks for the user-id. This is the id associated with the public key of the recipient.If you do not provide an input file or any input from the pipleine (|), then gpg waits for you to type a message, after which you will press Ctrl-D or Ctrl-Z to signify you are done. If you used -o filename.gpg, then the encrypted data will be stored in filename.gpg.~ $ gpg -o message.asc -e -a -r clovett@mcnc.org# You may receive this error. This is because you haven't signed the recipient's# public key. If you are sure this is the correct key, you can answer 'y'.gpg: DE1D6F0A38429A0B: There is no assurance this key belongs to the named usersub rsa4096/DE1D6F0A38429A0B 2021-01-21 Christopher Lovett &lt;clovett@mailbox.mcnc.org&gt; Primary key fingerprint: 764F 8DCD BAF1 8D49 7717 88AD D5A4 CF5A BE86 1374 Subkey fingerprint: 4D81 E207 C4B1 6C69 968B 4108 DE1D 6F0A 3842 9A0BIt is NOT certain that the key belongs to the person namedin the user ID. If you *really* know what you are doing,you may answer the next question with yes.Use this key anyway? (y/N) y # Answer 'y' here if you're sure this is the correct keyThis is a message I encrypted. # Enter your message and end with a blank line# Press &lt;Ctrl-D&gt; on macOS or Linux, &lt;Ctrl-Z&gt;&lt;Enter&gt; on Windows~ $ ls message.gpg -rw-r--r-- 1 user 106 message.ascYou can now send the output file via email or other means. The recipient can decrypt the file with their private key.Creating Your Own KeypairSending encrypted files and verifying signatures are only half of the things you can do with gpg. You may need to receive data or sign it yourself. To do this, you’ll need your own keypair.You’ll see that keys can have expiration dates. These can be updated at any time, even after expiration, provided you still have access to the private key. Expiration dates are used to ensure others update their copy of your key and prevent someone from using a stolen subkey after expiration, among other things. It is good practice to set an expiration at least for your subkeys. The private key is your identity to others, which they must be able to trust. You should keep the private key safe at all costs. For example, my private master key is stored on physical paper and on USB drive in a fire-proof lock box.Quick Key Creation# Create a new master key that never expires~ $ gpg --quick-gen-key 'Big Cootie &lt;bigcootie@example.com&gt;' ed25519 cert 0We need to generate a lot of random bytes. It is a good idea to performsome other action (type on the keyboard, move the mouse, utilize thedisks) during the prime generation; this gives the random numbergenerator a better chance to gain enough entropy.# GnuPG will prompt for a password to secure the new private keygpg: key 163F9BB1EB0CC234 marked as ultimately trustedgpg: revocation certificate stored as '/Users/user/.gnupg/openpgp-revocs.d/CEB8AD11C13AF31E86FB3DF7163F9BB1EB0CC234.rev'public and secret key created and signed.pub ed25519 2021-11-15 [C] CEB8AD11C13AF31E86FB3DF7163F9BB1EB0CC234uid Big Cootie &lt;bigcootie@example.com&gt;# Create signing subkey using the 'fingerprint' of the new master key# that expires in 6 months~ $ gpg --quick-add-key CEB8AD11C13AF31E86FB3DF7163F9BB1EB0CC234 ed25519 sign 6mWe need to generate a lot of random bytes. It is a good idea to performsome other action (type on the keyboard, move the mouse, utilize thedisks) during the prime generation; this gives the random numbergenerator a better chance to gain enough entropy.# GnuPG will prompt for the private key's password from earlier# Create encryption subkey using the 'fingerprint' of the new master key# that expires in 6 mounths~ $ gpg --quick-add-key CEB8AD11C13AF31E86FB3DF7163F9BB1EB0CC234 cv25519 encrypt 6mWe need to generate a lot of random bytes. It is a good idea to performsome other action (type on the keyboard, move the mouse, utilize thedisks) during the prime generation; this gives the random numbergenerator a better chance to gain enough entropy.# GnuPG will prompt for the private key's password from earlierDetailed Key Creation~ $ gpg --full-gen-key --expertgpg (GnuPG) 2.3.3; Copyright (C) 2021 Free Software Foundation, Inc.This is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.Please select what kind of key you want: (1) RSA and RSA (2) DSA and Elgamal (3) DSA (sign only) (4) RSA (sign only) (7) DSA (set your own capabilities) (8) RSA (set your own capabilities) (9) ECC (sign and encrypt) *default* (10) ECC (sign only) (11) ECC (set your own capabilities) (13) Existing key (14) Existing key from cardYour selection? 11 # Enter '11' to select an ECC keyPossible actions for this ECC key: Sign Certify Authenticate Current allowed actions: Sign Certify (S) Toggle the sign capability (A) Toggle the authenticate capability (Q) FinishedYour selection? s # Enter 's' to turn off signingPossible actions for this ECC key: Sign Certify Authenticate Current allowed actions: Certify (S) Toggle the sign capability (A) Toggle the authenticate capability (Q) FinishedYour selection? q # Enter 'q' to finishPlease select which elliptic curve you want: (1) Curve 25519 *default* (2) Curve 448 (3) NIST P-256 (4) NIST P-384 (5) NIST P-521 (6) Brainpool P-256 (7) Brainpool P-384 (8) Brainpool P-512 (9) secp256k1Your selection? 1 # Enter '1' to use a Curve 25519 keyPlease specify how long the key should be valid. 0 = key does not expire &lt;n&gt; = key expires in n days &lt;n&gt;w = key expires in n weeks &lt;n&gt;m = key expires in n months &lt;n&gt;y = key expires in n yearsKey is valid for? (0) 0 # Enter '0' or your desired expiration periodKey does not expire at allIs this correct? (y/N) y # Enter 'y' to finish the key setupGnuPG needs to construct a user ID to identify your key.Real name: Big Cootie # Enter your nameEmail address: bigcootie@example.com # Enter your email addressComment: # A comment is optionalYou selected this USER-ID: \"Big Cootie &lt;bigcootie@example.com&gt;\"Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o # Enter 'o' to complete the uidWe need to generate a lot of random bytes. It is a good idea to performsome other action (type on the keyboard, move the mouse, utilize thedisks) during the prime generation; this gives the random numbergenerator a better chance to gain enough entropy.# GnuPG will prompt for a password to secure the new private keygpg: key AD551B435E0EA0BC marked as ultimately trustedgpg: revocation certificate stored as '/Users/user/.gnupg/openpgp-revocs.d/DE6C0EA75D05EA6300BE78D1AD551B435E0EA0BC.rev'public and secret key created and signed.pub ed25519 2021-11-15 [C] DE6C0EA75D05EA6300BE78D1AD551B435E0EA0BCuid Big Cootie &lt;bigcootie@example.com&gt;Now create your subkeys, one for signing and one for encryption.~ $ gpg --edit-key --expert bigcootie@example.comgpg (GnuPG) 2.3.3; Copyright (C) 2021 Free Software Foundation, Inc.This is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.Secret key is available.sec ed25519/AD551B435E0EA0BC created: 2021-11-15 expires: never usage: C trust: ultimate validity: ultimate[ultimate] (1). Big Cootie &lt;bigcootie@example.com&gt;gpg&gt; addkey # Enter 'addkey' to add a new subkeyPlease select what kind of key you want: (3) DSA (sign only) (4) RSA (sign only) (5) Elgamal (encrypt only) (6) RSA (encrypt only) (7) DSA (set your own capabilities) (8) RSA (set your own capabilities) (10) ECC (sign only) (11) ECC (set your own capabilities) (12) ECC (encrypt only) (13) Existing key (14) Existing key from cardYour selection? 10 # Enter '10' for an ECC signing keyPlease select which elliptic curve you want: (1) Curve 25519 *default* (2) Curve 448 (3) NIST P-256 (4) NIST P-384 (5) NIST P-521 (6) Brainpool P-256 (7) Brainpool P-384 (8) Brainpool P-512 (9) secp256k1Your selection? 1 # Enter '1' for Curve 25519Please specify how long the key should be valid. 0 = key does not expire &lt;n&gt; = key expires in n days &lt;n&gt;w = key expires in n weeks &lt;n&gt;m = key expires in n months &lt;n&gt;y = key expires in n yearsKey is valid for? (0) 6m # Enter '6m' or your desired expiration periodKey expires at Sat May 14 18:46:58 2022 EDTIs this correct? (y/N) y # Enter 'y' to confirmReally create? (y/N) y # Enter 'y' to be extra sureWe need to generate a lot of random bytes. It is a good idea to performsome other action (type on the keyboard, move the mouse, utilize thedisks) during the prime generation; this gives the random numbergenerator a better chance to gain enough entropy.# GnuPG will prompt for the private key's password from earliersec ed25519/AD551B435E0EA0BC created: 2021-11-15 expires: never usage: C trust: ultimate validity: ultimatessb ed25519/E4E10D8C00A4AEC8 created: 2021-11-15 expires: 2022-05-14 usage: S [ultimate] (1). Big Cootie &lt;bigcootie@example.com&gt;gpg&gt; addkey # Enter 'addkey' to add a new subkeyPlease select what kind of key you want: (3) DSA (sign only) (4) RSA (sign only) (5) Elgamal (encrypt only) (6) RSA (encrypt only) (7) DSA (set your own capabilities) (8) RSA (set your own capabilities) (10) ECC (sign only) (11) ECC (set your own capabilities) (12) ECC (encrypt only) (13) Existing key (14) Existing key from cardYour selection? 12 # Enter '12' for an ECC encryption keyPlease select which elliptic curve you want: (1) Curve 25519 *default* (2) Curve 448 (3) NIST P-256 (4) NIST P-384 (5) NIST P-521 (6) Brainpool P-256 (7) Brainpool P-384 (8) Brainpool P-512 (9) secp256k1Your selection? 1 # Enter '1' for Curve 25519Please specify how long the key should be valid. 0 = key does not expire &lt;n&gt; = key expires in n days &lt;n&gt;w = key expires in n weeks &lt;n&gt;m = key expires in n months &lt;n&gt;y = key expires in n yearsKey is valid for? (0) 6m # Enter '6m' or your desired expiration periodKey expires at Sat May 14 19:04:06 2022 EDTIs this correct? (y/N) y # Enter 'y' to confirmReally create? (y/N) y # Enter 'y' to be extra sureWe need to generate a lot of random bytes. It is a good idea to performsome other action (type on the keyboard, move the mouse, utilize thedisks) during the prime generation; this gives the random numbergenerator a better chance to gain enough entropy.# GnuPG will prompt for the private key's password from earliersec ed25519/AD551B435E0EA0BC created: 2021-11-15 expires: never usage: C trust: ultimate validity: ultimatessb ed25519/E4E10D8C00A4AEC8 created: 2021-11-15 expires: 2022-05-14 usage: S ssb cv25519/9CA997BF45733016 created: 2021-11-15 expires: 2022-05-14 usage: E [ultimate] (1). Big Cootie &lt;bigcootie@example.com&gt;gpg&gt; save # Enter 'save' to save the changes and exit gpgExporting Your Public KeyYou’ll need to share your public key with others for them to send you encrypted data. I recommend using the -a and -o file along with --export to export your public key to a text file. -o file or --output file is used to send output to file. -a or --armor to create ASCII armored output. The default is to create the binary OpenPGP format. --export to either export all keys from all keyrings (default keyring and those registered via option –keyring), or if at least one name is given, those of the given name.~ $ gpg -o bigcootie.pub -a --export bigcootie@example.comYou can now share the output file, bigcootie.pub in this case, with whoever you need to converse with.You can also upload your key to a keyserver. Upload the public key file here: https://keys.openpgp.org/uploadGuard Your KeysYou should also create a revocation certificate that you can upload to keyservers if your key is compromised. This certificate and your private key should be backed up offline and secured.The following will export your private key and create a revocation certificate: -o file or --output file is used to send output to file. -a or --armor to create ASCII armored output. The default is to create the binary OpenPGP format. --export-secret-key Same as –export, but exports the secret keys instead. The exported keys are written to STDOUT or to the file given with option –output. This command is often used along with the option –armor to allow for easy printing of the key for paper backup; however the external tool paperkey does a better job of creating backups on paper. Note that exporting a secret key can be a security risk if the exported keys are sent over an insecure channel. --gen-revoke name or --generate-revocation name will generate a revocation certificate for the complete key.# Export your secret key~ $ gpg -o bigcootie.sec --export-secret-key -a bigcootie@example.com# GnuPG will ask for the password to your key so it can be exported# Create a revocation certificate~ $ gpg -o bigcootie.rev --gen-revoke bigcootie@example.comsec ed25519/163F9BB1EB0CC234 2021-11-15 Big Cootie &lt;bigcootie@example.com&gt;Create a revocation certificate for this key? (y/N) y # Enter 'y' to continuePlease select the reason for the revocation: 0 = No reason specified 1 = Key has been compromised 2 = Key is superseded 3 = Key is no longer used Q = Cancel(Probably you want to select 1 here)Your decision? 0 # Enter '0' or '1' reason for the revocationEnter an optional description; end it with an empty line:&gt; # A description is optionalReason for revocation: No reason specified(No description given)Is this okay? (y/N) y # Enter 'y' to continueASCII armored output forced.Revocation certificate created.Please move it to a medium which you can hide away; if Mallory getsaccess to this certificate he can use it to make your key unusable.It is smart to print this certificate and store it away, just in caseyour media become unreadable. But have some caution: The print system ofyour machine might store the data and make it available to others!Decrypting a FileDecrypting is a straightforward process. When you receive a file that is encrypted with a password, simply run gpg with the -d and -o file options. This will prompt for the password and store the location specified by file. If the data is a simple text file that you just wish to output to the terminal, you can leave off the -o option. -d or --decrypt will decrypt the file given on the command line (or STDIN if no file is specified) and write it to STDOUT (or the file specified with –output). If the decrypted file is signed, the signature is also verified. -o file or --output file is used to send output to file.# For binary files or data you wish to save to disk...~ $ gpg -d -o mybulkdata.zip mybulkdata.zip.gpggpg: encrypted with cv25519 key, ID 24FDDB38B2CF1DE8, created 2021-11-15 \"Big Cootie &lt;bigcootie@example.com&gt;\"# GnuPG will prompt for a password# For simple text you want to display to the terminal...~ $ gpg -d message.gpggpg: encrypted with cv25519 key, ID 24FDDB38B2CF1DE8, created 2021-11-15 \"Big Cootie &lt;bigcootie@example.com&gt;\"# GnuPG will prompt for a passwordThis is a message I encrypted." }, { "title": "GnuPG - Intro & Installation", "url": "/posts/installing-gpg/", "categories": "Security, Encryption", "tags": "security, gpg, gnupg, pgp, encryption", "date": "2021-11-15 23:00:00 -0500", "snippet": "You can skip right to the installation for Windows or macOS. GnuPG is included in all major Linux distributions.IntroductionGnuPG or “GNU Privacy Guard” is a free and open source implementation of ...", "content": "You can skip right to the installation for Windows or macOS. GnuPG is included in all major Linux distributions.IntroductionGnuPG or “GNU Privacy Guard” is a free and open source implementation of the OpenPGP standard. GnuPG was first released in 1997, and has been actively developed and updated ever since. It is primarily used to secure communications between two or more people, however, you can encrypt any file for personal storage as well. Encryption can be done with the latest secure methods either by public key cryptography via RSA or ECC, or symmetric cryptography via AES or other ciphers.Public Key CryptographyPublic key cryptography, also known as asymmetric cryptography, works by using someone else’s public key to encrypt information that they can decrypt with their private key. The idea is that only that person has possession and control of their private key, therefore you can be sure that they are the only person that can access the data. However, you should be sure that the public key you are using actually belongs to the intended recipient.As a side note, you can use your private key to sign data so that the recipient knows that you sent it and that it hasn’t changed since you signed it.Symmetric Key CryptographySymmetric key cryptography works by setting a password, and using that password in some cipher to encrypt data. The recipient would then use that password to decrypt the data. The issue here is that the recipient must first know the password. The other concern is that the recipient may not be the only one who knows the password, also the password could be brute-forced. As of this writing, GnuPG uses the AES256 cipher, so you know your data is secured, as long as the password isn’t compromised.Installation on WindowsGnuPG can be installed on Windows through the official installer or via Gpg4Win. We’ll covering the official installer, as that is all that is needed for basic functionality. If you would like a graphical interface, you can use Gpg4Win if you choose. Visit https://gnupg.org/ftp/gcrypt/binary/ in your browser and select the most recent version. As of this writing the lastest installer is gnupg-w32-2.3.3_20211012.exe Run the installer. You may need to provide administrator access. Open a terminal or powershell window. Type in gpg --version You should get something similar to: PS C:\\Users\\User&gt; gpg --versiongpg (GnuPG) 2.3.3libgcrypt 1.9.4Copyright (C) 2021 g10 Code GmbHLicense GNU GPL-3.0-or-later &lt;https://gnu.org/licenses/gpl.html&gt;This is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.Home: C:\\Users\\User\\AppData\\Roaming\\gnupgSupported algorithms:Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSACipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256AEAD: EAX, OCBHash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224Compression: Uncompressed, ZIP, ZLIB, BZIP2Installation on macOSGnuPG can be installed on macOS through Homebrew, via GPGSuite or gpgOSX. I’ll be covering the Homebrew method, as that is all that is needed for basic functionality. If you would like a graphical interface, you can use GPGSuite if you choose. If Homebrew is not installed, follow the instructions at https://brew.sh Once Homebrew is installed run brew install gnupg in a Terminal window. Now that GnuPG is installed, run gpg --version in the terminal. You should get something similar to: ~/ &gt; gpg --versiongpg (GnuPG) 2.3.3libgcrypt 1.9.4Copyright (C) 2021 Free Software Foundation, Inc.License GNU GPL-3.0-or-later &lt;https://gnu.org/licenses/gpl.html&gt;This is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.Home: /Users/User/.gnupgSupported algorithms:Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSACipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256AEAD: EAX, OCBHash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224Compression: Uncompressed, ZIP, ZLIB, BZIP2" }, { "title": "GnuPG - Encrypting Files with a Password", "url": "/posts/gpg-symmetric/", "categories": "Security, Encryption", "tags": "security, gpg, gnupg, pgp, encryption", "date": "2021-11-15 23:00:00 -0500", "snippet": "Encrypting files or data with a password is called symmetric encryption. The benefit to this method is the speed of the encryption and decryption process, so it is more suited to large files and da...", "content": "Encrypting files or data with a password is called symmetric encryption. The benefit to this method is the speed of the encryption and decryption process, so it is more suited to large files and data in bulk. However, the downside is that the password must be shared by some other means, whether by email, instant message, phone or in person. Also, anyone who gains access to the password will be able to access the data.This is very similar to a password protected zip file. The difference is while a protected zip file cannot have its contents viewed, you can replace a file within it without the recipient knowing. Also, zip uses encryption methods that are known to be vulnerable, whereas GnuPG uses the widely used AES256 cipher. It is better to zip your data and then encrypt it with the gpg tool to avoid this issue.Here, we’ll walk through encrypting and decrypting data using symmetric encryption in GnuPG.Encrypting a Short MessageWith GnuPG, you can encypt a message without ever writing the data to disk in plaintext. To do so, we’ll use the -o file and -c options. -o file or --output file is used to send output to file. -c or --symmetric tells gpg to encrypt with a symmetric cipher using a passphrase.If you do not provide an input file or any input from the pipleine (|), then gpg asks for the new passphrase and waits for you to type a message, after which you will press Ctrl-D to signify you are done. If you used -o filename.gpg, then the encrypted data will be stored in filename.gpg.$ gpg -o message.gpg -c# GnuPG will prompt for a passwordThis is a message I encrypted. # Enter your message and end with a blank line# Press &lt;Ctrl-D&gt; on macOS or Linux, &lt;Ctrl-Z&gt;&lt;Enter&gt; on Windows$ ls message.gpg -rw-r--r-- 1 user 106 message.gpgYou can now send the output file via email or other means, but remember you’ll need to provide the other person the password.Encrypting a FileGnuPG can only encrypt one file at a time, so if you have many files to send, you’ll want to zip or tar them first. If you’re sending a single file, then this is not necessary. Lets say you have a large batch of employee data that needs to be sent or stored, for example. Use the tool of your choosing to aggregate the data into a single file (eg. mybulkdata.zip). Next, use gpg with option -c to encrypt the data. -c or --symmetric tells gpg to encrypt with a symmetric cipher using a passphrase.$ gpg -c mybulkdata.zip# GnuPG will prompt for a password$ ls mybulkdata.zip*-rw-r--r-- 1 user 385788673 mybulkdata.zip-rw-r--r-- 1 user 385788781 mybulkdata.zip.gpgYou can now store or send this confidential data and inform the recipient of the password so that they can decrypt it.Decrypting a FileDecrypting is a straightforward process. When you receive a file that is encrypted with a password, simply run gpg with the -d and -o file options. This will prompt for the password and store the location specified by file. If the data is a simple text file that you just wish to output to the terminal, you can leave off the -o option. -d or --decrypt will decrypt the file given on the command line (or STDIN if no file is specified) and write it to STDOUT (or the file specified with –output). If the decrypted file is signed, the signature is also verified. -o file or --output file is used to send output to file.# For binary files or data you wish to save to disk...$ gpg -d -o mybulkdata.zip mybulkdata.zip.gpggpg: AES256.CFB encrypted data# GnuPG will prompt for a passwordgpg: encrypted with 1 passphrase# For simple text you want to display to the terminal...$ gpg -d message.gpggpg: AES256.CFB encrypted data# GnuPG will prompt for a passwordgpg: encrypted with 1 passphraseThis is a message I encrypted." }, { "title": "Windows-based SFTP Server", "url": "/posts/windows-based-sftp-server/", "categories": "Services, SSH / SFTP", "tags": "networking, ssh, windows, sftp, security", "date": "2021-09-08 00:00:00 -0400", "snippet": "This guide demonstrates the precedure for creating a Windows-based SFTP server using the built-in OpenSSH instance. The end result is an SFTP server only available to the “sftpusers” group via sftp...", "content": "This guide demonstrates the precedure for creating a Windows-based SFTP server using the built-in OpenSSH instance. The end result is an SFTP server only available to the “sftpusers” group via sftp only. There will be no ssh shell access to the server.System Requirements Windows 10 1809 or later, Windows Server 2019 or later A careful eye on security Recommendations, in case of compromise Do not add the server to the domain If the server is exposed to the internet, keep it in a DMZ Do not use the server for other purposes Create SFTP Users Add local user account for service (eg. ‘Powerschool’) Add local group named ‘sftpusers’ Add service user to ‘sftpusers’ group Create SFTP Chroot folder Under C:\\, create a folder named ‘sftp’ Edit the folder security settings and disable inheritance Add ‘sftpusers’ group with Modify rightsInstall OpenSSH Server Open PowerShell as administrator Enter the following command Get-WindowsCapability -Online -Name OpenSSH.Server* | Add-WindowsCapability -Online Start OpenSSH Service Open PowerShell as administrator Enter the following commands Set-Service sshd -StartupType AutomaticStart-Service sshd Configure OpenSSH Service Open PowerShell as administrator Backup default config cd C:\\ProgramData\\sshcp .\\sshd_config .\\sshd_config.bak Open configuration file with notepad.exe sshd_config Replace entire configuration with ForceCommand internal-sftpSubsystem sftp internal-sftp -d \"C:\\sftp\\\"ChrootDirectory C:\\sftpPermitTunnel noAllowAgentForwarding noAllowTcpForwarding noX11Forwarding noAllowGroups sftpusers Save and close the fileRestart OpenSSH Service Open PowerShell as administrator Enter the following command: Restart-Service sshd Test SSH Connection (should fail) Verify you are not able to connect to the server from another machine via ssh with any user account ssh &lt;useraccount&gt;@&lt;newserverip&gt; Test SFTP Connection (should work) Use sftp to connect to the server (you can also use WinSCP of Filezilla) sftp &lt;useraccount&gt;@&lt;newserverip&gt; Once connected, verify you cannot change to a higher directory cd .., for example, should return “permission denied” Ensure a Safe Environment Edit the local firewall to only allow certain hosts/networks to port 22 If allowing access from the internet, edit the internet firewall ACLs to only allow traffic in from trusted IP addresses on port 22 Ensure automatic updates are running and do not require intervention. Ensure endpoint security is installed and running" }, { "title": "SSL Certificate Management", "url": "/posts/ssl_certificate_management/", "categories": "Security, Certificates", "tags": "security, certificate, pem, crt, cer, pfx, p7b, p12, openssl", "date": "2021-05-17 00:00:00 -0400", "snippet": "PEM Format (*.pem \\ *.crt \\ *.cer \\ *.key)The PEM format is a base64 encoded file format representing an X.509 certificate, or the certificate you are presented in your browser. If you open the cer...", "content": "PEM Format (*.pem \\ *.crt \\ *.cer \\ *.key)The PEM format is a base64 encoded file format representing an X.509 certificate, or the certificate you are presented in your browser. If you open the certificate file in a text editor and it looks like a long block of text beginning with -----BEGIN CERTIFICATE-----, then it is likely in PEM format. PEM files can also contain private keys, but are usually seperate from their public key counterpart.View Public Keyopenssl x509 -in mycert.pem -text -nooutView Private Key# If encrypted, you will be prompted for the private key passwordopenssl pkey -in mypriv.key -text -nooutConvert to DER (*.cer \\ *.der)openssl x509 -in mycert.pem -outform der -out mycert.cerConvert to PKCS7 (*.p7b)openssl crl2pkcs7 -nocrl -certfile mycert.pem -out mycert.p7bConvert to PKCS12 (*.pfx)Linux or macOS# If encrypted, you will be prompted for the private key password# You will be prompted to provide a password for the PFX fileopenssl pkcs12 -export -in mycert.pem -inkey mypriv.key -out mycert.pfxWindowsNote: Certutil looks for a *.key file matching the name of the *.crt file. Ensure that the *.crt and *.key files have the same name (ie. mycert.crt and mycert.key).certutil -mergepfx mycert.crt mycert.pfxDER Format (*.cer \\ *.der)The DER format is a binary file representing an X.509 certificate, or the certificate you are presented in your browser. Opening this file in a text editor will display garbage, due to it being binary and not text, like PEM. Your private key will not be in DER format.View Public Keyopenssl x509 -inform der -in mycert.cer -text -nooutConvert to PEM (*.pem \\ *.crt \\ *.cer)openssl x509 -inform der -in mycert.cer -outform pem -out mycert.pemConvert to PKCS12 (*.pfx)# If encrypted, you will be prompted for the private key password# You will be prompted to provide a password for the PFX fileopenssl x509 -inform der -in mycert.cer | openssl pkcs12 -export -inkey mypriv.key -out mycert.pfxPKCS7 Format (*.p7b)The PKCS7 format is a base64 encoded file format typically containing a certificate revocation list and a certificate chain. The PKCS7 file does not contain a private key.View Public Keyopenssl pkcs7 -in mycert.p7b -print_certs -text -nooutConvert to PEM (*.pem \\ *.crt \\ *.cer)openssl pkcs7 -in mycert.p7b -print_certs -out mycert.pemPKCS12 Format (*.pfx)Can either have a PFX or P12 file extension. These formats are not the same. The PFX format is a binary file, while the P12 format is simply a base64 encoded version of the PFX file. Converting between these two is noted below. The PKCS12 file does contain a private key.View Public Keyopenssl pkcs12 -in mycert.pfx -nokeys | openssl x509 -text -nooutView Private Key# You will be prompted for the PFX file passwordopenssl pkcs12 -in mycert.pfx -nocerts -nodes | openssl pkey -text -nooutConvert to DER (*.cer \\ *.der)# Output public key to mycert.ceropenssl pkcs12 -in mycert.pfx -nokeys | openssl x509 -outform der -out mycert.cer# Output Private key to mypriv.key# You will be prompted to provide a private key passwordopenssl pkcs12 -in mycert.pfx -nocerts -out mypriv.keyConvert to PEM (*.pem \\ *.crt \\ *.cer \\ *.key)# Output public key to mycert.pemopenssl pkcs12 -in mycert.pfx -nokeys -out mycert.pem# Output Private key to mypriv.key# You will be prompted to provide a private key passwordopenssl pkcs12 -in mycert.pfx -nocerts -aes256 -out mypriv.keyConvert to (*.p12)openssl base64 -in mycert.pfx -out mycert.p12Convert from (*.p12)openssl base64 -d -in mycert.p12 -out mycert.pfx" }, { "title": "Securing Admins with Smart Cards (Yubikeys)", "url": "/posts/securing-admins-with-smart-cards-yk/", "categories": "Security, Authentication", "tags": "security, gpg, gnupg, pgp, encryption, yubikey, smartcard, certificates, windows, powershell", "date": "2021-03-26 00:00:00 -0400", "snippet": "We all know that giving local admin rights to normal users is a big no-no, but what happens if an administrator’s account is compromised? What if a domain admin’s account credentials are obtained? ...", "content": "We all know that giving local admin rights to normal users is a big no-no, but what happens if an administrator’s account is compromised? What if a domain admin’s account credentials are obtained? To prevent a potentially catastrophic event, you should use some form of multi-factor authentication to protect those accounts. We all understand that some normal users find difficultly with using multi-factor logins, but as administrators, we don’t really have a choice. The fate of the network is in our hands.One way of providing security is only using admin credentials when necessary. Another step on top of that is to use multi-factor authentication. One method that is fairly easy to set up is a smart card implementation. For this example we are going to use the Yubikey product, which provides Personal Identity Verification (PIV) functionality. This allows us to store an authentication certificate on a portable key to use to log in to an admin account.Example AD SetupIn our example, the Active Directory structure is as follows: ad.example.com (Domain Root) Technology (OU) johndoe (User - Supervisor) admin.johndoe (User - Admin Account) Domain Admins (Group) admin.johndoe Enrollment Agents (Group) johndoe No Logon Local (OU) admin.billybob (User - Admin Account) Local Admins (Group) admin.billybob Install Yubikey DriversPush out, by your preferred method, the driver for your smart cards system-wide. This can be through SCCM, GPO or any other method. An example install script for the Yubikey Smart Card Minidriver is below. You can also get more information from Yubico’s website.$installPath = \"\\\\ad.example.com\\SYSVOL\\ad.example.com\\scripts\\yubikey\\YubiKey-Minidriver-4.1.1.210-x64.msi\"if ( !(Get-WmiObject WIN32_PnpSignedDriver | Where-Object { $_.DeviceName -eq \"YubiKey Smart Card Minidriver\" -and $_.DriverVersion -ge \"4.1.1.210\"}) -and (Test-Path $installPath) ) { msiexec.exe -i $installPath INSTALL_LEGACY_NODE=1 /quiet} Certificate SetupCreate CA Templates Add Enrollment Agents group to Read access on the Enrollment Agent template Duplicate the Smartcard Logon template Under General tab: Enter a name for the template (ie. “Yubikey”) Enter a validity period (ie. 5 years) Check Publish certificate in Active Directory Check Do not automatically reenoll if a duplicate certificate exists in Active Directory Under Compatibility tab: Select the OS where the Certificate Authority resides Select the oldest version of Windows in use on the domain Under Request Handling tab: For Purpose, select Signature and encryption Check Include symmetric algorithms allowed by the subject Uncheck Renew with the same key Check For automatic renewal of smart card certificates, use the existing key if a new key cannot be created Check Prompt the user during enrollment Under Cryptography tab: For Provider category, click the arrow and select Key Storage Provider from the dropdown For Algorithm name, select either RSA For Minimum key size, enter 2048 Check Requests must use one of the following providers: Under Providers, select Microsoft Smart Card Key Storage Provider Click the arrow for Request hash and select SHA256 from the list displayed Under Security tab: For Group or user names: Confirm Authenticated Users is listed. If is not, click Add, enter the name of the group, and then click OK For Permissions for Authenticated Users, be sure the option for Read is checked Add the Enrollement Agents group and check the option for Read and Enroll Under Issuance Requirements tab: Check This number of authorized signatures, and enter 1 For Policy type required in signature, select Application policy For Application policy, select Certificate Request Agent Publish both the Enrollment Agent and new Smartcard Logon (Yubikey) templates to the Certificate AuthorityCreate Enrollment Agents Open certmgr.msc, and under Personal\\Certificates: Right click &gt; All Tasks &gt; Request New Certificate… Click through and select the Enrollment Agent template, then click Enroll Enroll a User Account with a Smart Card Also in certmgr.msc under Personal\\Certificates: Right click &gt; All Tasks &gt; Advanced Operations, then select Enroll on Behalf of Click through and select the new smart card template (Yubikey) Type in the user account you want to enroll (admin.johndoe) and click Enroll Enter the PIN for the smart card Open PowerShell and enter certutil -scroots update to add the Enterprise Root Certificate to the smart card You should now be able to login with the admin account (admin.johndoe) by attempting to open a program like PowerShell as administrator. With the Yubikey inserted into the computer, load an application as administrator to bring up the elevation window as shown below. You may need to click on More choices to bring up the smart card entry. As you can see, once the smart card is selected, the assigned user is already entered. You now you be able to type in the PIN for the Yubikey and press enter. You should now be running the application as the admin user assigned to the card.Set the GPOsSet Removal PolicyShould the user need to step away from a machine or remote desktop session, the session should lock. These settings will ensure the session locks when the smart card is removed. Open Group Policy Manager and create a GPO for smart card login at the root of the domain (ie. Smart Card Policy), or use the Default Domain Policy Under Computer Configuration&gt;Policies&gt;Windows Settings&gt;Security Settings&gt;System Services: Set Smart Card Removal Policy to Automatic (Keep in mind, the service will not auto-start until the device is rebooted. You can also start the service manually if you are unable to reboot a device at the time.) Under Computer Configuration&gt;Policies&gt;Windows Settings&gt;Security Settings&gt;Local Policies&gt;Security Options: Set Interactive logon: Smart card removal behavior to Disconnect if a remote Remote Desktop Services session Set Local AdministratorsHere we will set what users are allowed to be local administrators domain-wide. Be very selective here and add any other accounts that are absolutely needed. For example, SCCM or other software management groups may need to be added. Under Computer Configuration&gt;Policies&gt;Windows Settings&gt;Security Settings&gt;Restricted Groups: Right click &gt; Add Group Enter Administrators and click OK Under Administrators Properties, click Add…, then add the following: AD\\Domain Admins AD\\Local Admins Administrator Prevent Privileged Users from Logging in DirectlyYou may wish to prevent certain user accounts from logging in to workstations directly, ie. the Windows Logon screen. A good example would be admin accounts. Everyone should be using their normal account to login, and only elevate when permissions are needed for a certain task. Any admin or account that you do wish to login to a workstation or server should NOT have this GPO applied. Create a new GPO under Technology\\No Logon Local OU (ie. No Logon Local Policy) * WARNING * Make sure that you DO NOT create this GPO in the root of the domain. This must only apply to very specific users that should not be able to log in locally. Whoever this GPO applies to will be immediately logged out. Under User Configuration &gt; Policies &gt; Administrative Templates &gt; System Set Custom User Interface to Enabled, under Interface file name enter logoff.exe, click OK Force Privileged Users to Use Smart CardsNow that you have assigned smart cards to your users, you need to force logins to require the card/key. Once this option is selected for each user, they must use the Yubikey to access the assigned admin account. In Active Directory Users and Computers, find the users that should only use smart card authentication (admin.johnsmith &amp; admin.billybob) For each user, under their Account tab, check Smart card required for interactive logon" }, { "title": "PowerShell Script Signing", "url": "/posts/powershell-script-signing/", "categories": "Powershell", "tags": "powershell, security, certificates, code signing", "date": "2021-03-06 23:00:00 -0500", "snippet": "Windows PowerShell has what’s called an Execution Policy. This policy defines how scripts are handled, and by default it is set to Restricted, which means no script is allowed to run. This is to pr...", "content": "Windows PowerShell has what’s called an Execution Policy. This policy defines how scripts are handled, and by default it is set to Restricted, which means no script is allowed to run. This is to prevent anyone from accidentally running a rogue script on the computer. What we typically see are Execution Policies set to Bypass, which allows any script to run. Anyone with administrative rights can set this, which makes Execution Policy more of a safety feature than a security one.There are two policies that require scripts to be signed, RemoteSigned and AllSigned. RemoteSigned requires that any script downloaded from the internet be signed. This way you can be sure that the script wasn’t altered in transit. AllSigned means that every script that runs must be signed and valid, which includes local scripts that you create yourself. If you run a signed script under either of these policies that isn’t signed by a Trusted Publisher, you’ll be prompted with a warning. Also, if the script was altered since it was last signed by you or anyone else, you’ll receive an error. This is a way that you can trust the scripts you’ve written haven’t been altered with some malicious code trying to trick you into infecting your entire network.Configure the Certificate Templates Open the Certificate Authority Console for your CA, right click Certificate Templates and click Manage Right click the Code Signing template then Duplicate Certificate Under General tab: Name the new template (ie. “PS Code Signing”) Enter a Validity Period (ie. 2 years) Under Compatibility tab: Select the OS version of your CA server Select the oldest version of Windows in the district Under Request Handling tab: Check Allow private key to be exported Select Prompt the user during enrollment and require user input when the private key is used Under Cryptography tab: For Provider Category, select Key Storage Provider For Algorithm name ensure ECDSA_P256 is selected and Minimum key size is 256 Select Requests must use one of the following providers and check Microsoft Software Ley Storage Provider Set Request hash to SHA256 Under Security tab: Add the group or users that you wish to be able to sign scripts for the district, and that they have the Read and Enroll permissions Click OK and close the Certificate Templates Console Open certsrv.msc, right click Certificate Templates &gt; New &gt; Certificate Template to Issue Select the code signing certificate you created (ie. “PS Code Signing”) then click OKEnroll for a Signing Certificate Open certmgr.msc and under Personal\\Certificates: Right click in the white space &gt; All Tasks &gt; Request New Certificate… Click Next, Next Select the code signing certificate you created (ie. “PS Code Signing”) and click Enroll Export the private key: Right click the new certificate &gt; All Tasks &gt; Export… Click Next, Next, Next Enter a save location and filename (ie. publicSigningKey.cer) and click Next Click Finish Export the private key: Right click the new certificate &gt; All Tasks &gt; Export… Click Next Select Yes, export the private key, click Next **Optional** If you’re going to use your code signing key on a Yubikey or similar device, check Delete the private key if the export is successful Click Next Check the box for Password protection and enter a secure password, set Encryption to AES256-SHA256 and click Next Enter a save location and filename (ie. privateSigningKey.pfx) and click Next Click Finish Configure the Group Policy Objects Under Computer Configuration&gt;Administrative Templates&gt;Windows Components&gt;Windows PowerShell: Double-click Turn on Script Execution Check Enabled From the dropdown, choose Allow only signed scripts Under Computer Configuration&gt;Policies&gt;Windows Settings&gt;Security Settings&gt;Public Key Policies&gt;Trusted Publishers: Right click in the white space &gt; Import… Click Next Browse for the public certificate that you exported previously (ie. publicSigningKey.cer) Click Next, enter the password used when the certificate was exported, click Next, Finish Open PowerShell and run gpupdate /forceSign a Script and Test Open PowerShell as the user who was issued the certificate Create a test script with echo “Write-Host ‘Hello World!’” &gt; test.ps1 Store the certificate in a variable with $cert = Get-ChildItem Cert:\\CurrentUser\\My -CodeSigningCert Sign the script Set-AuthenticodeSignature -Certificate $cert -TimestampServer http://timestamp.digicert.com .\\test.ps1 The time stamp server is important because without a verified time of signing, the script will no longer be vaid if your certificate expires. Using a time stamp certification in the signature will verify that the certificate was valid at the time it was signed. Verify the script was signed Get-AuthenticodeSignature .\\test.ps1 | select * Run the script ./test.ps1If you open your script in Notepad or type cat test.ps1, you’ll see a long block of random letters and numbers. This is the new signature you’ve just applied. If you change any part of the script, this signature will no longer be valid and display an error when ran. To validate any changes you make, you simply re-sign the certificate as before. Since you added your signing certificate to Trusted Publishers in a GPO, all machines in your domain will trust that the script is legitimate.Secure Your Private KeyYour private signing key that we exported earlier is very important and shouldn’t be shared with anyone. If you wish to use this key on another PC, you’ll need to import it. It is highly recommended that you place this file in a secure location, and also add your key to a device that supports Personal Identity Verification (PIV), such as a Yubikey. Using a PIV device allows you to carry your signing key and use it wherever needed, without having to import the key itself." }, { "title": "PAC File Syntax Explained", "url": "/posts/pac-file-syntax-explained/", "categories": "PAC Files", "tags": "pacfiles, zscaler, filtering", "date": "2020-12-15 23:00:00 -0500", "snippet": "PAC files can seem a bit complicated at first, but keep in mind that they are just a javascript function with only two inputs. We’ll be going over an example PAC file and discussing what each secti...", "content": "PAC files can seem a bit complicated at first, but keep in mind that they are just a javascript function with only two inputs. We’ll be going over an example PAC file and discussing what each section does, as well as the correct syntax. Proper syntax is important, as making a slight mistake, like a misplaced semicolon, can cause the entire script to fail and no traffic to be proxied. For a full and comprehensive description of all available PAC file functions, check out Mozilla’s documentation.For the NCREN community that uses Zscaler, there is a “Verify” button that can be used to check the validity of your code. Keep in mind that this doesn’t always catch problems in the syntax and you should always verify that your traffic is being proxied correctly after making a change.The PAC file below is the example we’ll be dicussing:function FindProxyForURL(url, host) { host = \".\"+host.toLowerCase(); var privateIP = /^(0|10|127|192\\.168|172\\.1[6789]|172\\.2[0-9]|172\\.3[01]|169\\.254|192\\.88\\.99)\\.[0-9.]+$/; var resolved_ip = dnsResolve(host); /* If local server is resolvable to the correct address, go directly out */ if (dnsResolve(\"internalserver.example.net\") == \"192.168.0.5\" ) return \"DIRECT\"; /* Don't send non-FQDN or private IP auths to us */ if (isPlainHostName(host) || isInNet(resolved_ip, \"192.0.2.0\",\"255.255.255.0\") || privateIP.test(resolved_ip)) return \"DIRECT\"; /* Some example host bypasses */ /* Single statement - complicated but faster on device */ if ( dnsDomainIs(host, \".example.com\") || dnsDomainIs(host, \".example.org\") || dnsDomainIs(host, \"sub.example.net\") ) return \"DIRECT\"; /* Multiple statements - easier but slower on device */ if (dnsDomainIs(host, \".example.com\")) return \"DIRECT\"; if (dnsDomainIs(host, \".example.org\")) return \"DIRECT\"; if (dnsDomainIs(host, \"sub.example.net\")) return \"DIRECT\"; /* Default Traffic Forwarding. */ return \"PROXY node1.example.com:9443; PROXY node2.example.com:9443\";}The Headingfunction FindProxyForURL(url, host) {This first section is the start of the function that the browser runs when making a request for a web site. As you see below, there are two variables fed to the PAC file. They are url and host. As of Chrome 75 (and it’s derivatives), these variables contain the following values given a URL such as https://www.example.com/some/path/index.html:url = https://www.example.com/host = www.example.comNotice there is no path information in the url variable. This is because Google determined this to be a security vulnerability and removed this information from PAC files. This means you are unable to use path information to direct traffic, and using paths will likely prevent your rules from working.host = \".\"+host.toLowerCase();This line is modifying the host variable. The host.toLowerCase() portion converts the host to all lowercase characters to ensure consistent matching later on in the PAC file. In other words, www.Example.com will become www.example.com.Adding the \".\"+ will prepend a dot to the host, which is a trick to prevent the need for entries for both example.com and .example.com in favor of just .example.com.var privateIP = /^(0|10|127|192\\.168|172\\.1[6789]|172\\.2[0-9]|172\\.3[01]|169\\.254|192\\.88\\.99)\\.[0-9.]+$/;This line creates a variable called privateIP for several IP ranges that should not be proxied. These are 0.0.0.0, 10.0.0.0/8, 127.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, 169.254.0.0/16 &amp; 192.88.99.0/24.var resolved_ip = dnsResolve(host);This line creates a variable called resolved_ip that contains the IP address of the site you’re trying to reach.Location Awareness/* If local server is resolvable to the correct address, go directly out */if (dnsResolve(\"localsrv.ad.example.net\") == \"192.168.0.5\" ) return \"DIRECT\"; This block uses the dnsResolve() function to determine the IP address of localsrv.ad.example.net and find if it equals the provided value of 192.168.0.5. If it does match, the traffic goes directly to the internet. This can be used with local DNS to test whether the client is on you network or not. If the client is off your network, naturally the hostanme will not resolve and the rest of the PAC file will be processed. It’s best to put your location aware section above your exclusion list. This will avoid needlessly processing a long list of exclusions when the device is on-site.Send Local Traffic DIRECT/* Don't send non-FQDN or private IP auths to us */if (isPlainHostName(host) || isInNet(resolved_ip, \"192.0.2.0\",\"255.255.255.0\") || privateIP.test(resolved_ip)) return \"DIRECT\";This block tests for three different things, seperated by double pipes (||). The double pipe means or. isPlainHostName(host) tests if host is a simple hostname like example-dc or localhost. Next, isInNet(resolved_ip, \"192.0.2.0\",\"255.255.255.0\") will test if the destination is in the 192.0.2.0/24 network. Lastly, privateIP.test(resolved_ip) tests whether the IP address of the destination matches the regular expression in the privateIP variable we dicussed earlier.Exclusions from PROXY/* Some example host bypasses *//* Single statement - complicated but faster on device */if ( dnsDomainIs(host, \".example.com\") || dnsDomainIs(host, \".example.org\") || dnsDomainIs(host, \"sub.example.net\")) return \"DIRECT\";/* Multiple statements - easier but slower on device */if (dnsDomainIs(host, \".example.com\")) return \"DIRECT\";if (dnsDomainIs(host, \".example.org\")) return \"DIRECT\";if (dnsDomainIs(host, \"sub.example.net\")) return \"DIRECT\";Now for the section you’ll have the most interaction with. This is where you place your rules for the various sites you wish not to be proxied. The above two blocks result in the exact same outcome. The difference is that the latter is more CPU intensive than the former. Its recommended to use whichever you are more comfortable with managing.In the first example, each test is separated by double pipes (||), which means or. The second exmaple places each test in its own statement on a seperate line.The dnsDomainIs() function works by testing if the given string, such as .example.com is contained in the host variable. For example. If you visited https://www.example.com, the host variable would equal www.example.com. Your traffic would be sent directly to the internet because the host variable contains the string .example.com.Sometimes a URL contains a simple domain name, such as example.com. This would not match .example.com and the traffic would be proxied. This can be resolved by adding an additional entry for the plain domain name. However, dnsDomainIs(host, \"example.com\") would also match xxxexample.com. As you can imagine, that would be a problem, so be careful using this method. A more efficient way would be to prepend the dot to every hostname, as we mentioned above, with host = \".\"+host.toLowerCase();. This allows you to always enter domains in the same fashion, such as dnsDomainIs(host, \".example.com\").When matching a subdomain, you’ll almost never want to provide a leading dot in your test. This is because doing so would require something preceeding it. For example:host = \"sub.example.com\"dnsDomainIs(host, \".sub.example.com\") // Does NOT matchdnsDomainIs(host, \"sub.example.com\") // Does matchYou would only want to add a leading dot if you expected something to always preceed it, such as pre.sub.example.com.Remember, never add path information to dnsDomainIs(), or any other function that references the host variable. It will never result in the desired outcome. As mentioned earlier, as of Chrome version 75, path information isn’t even included in the url variable.Send All Other Traffic to PROXY/* Default Traffic Forwarding. */return \"PROXY node1.example.com:9443; PROXY node2.example.com:9443\";This final block sends all traffic that wasn’t matched above to the proxy server. These are prioritized from left to right. If the first server is unreachable, the second is used." }, { "title": "PAC File Tips & Tricks", "url": "/posts/pac-file-tips-n-tricks/", "categories": "PAC Files", "tags": "pacfiles, zscaler, filtering", "date": "2020-12-14 23:00:00 -0500", "snippet": "Lets try to clear up some common questions and issues with PAC filesUnderstand what the “url” and “host” variables areYou will always see the following on the top line of a PAC filefunction FindPro...", "content": "Lets try to clear up some common questions and issues with PAC filesUnderstand what the “url” and “host” variables areYou will always see the following on the top line of a PAC filefunction FindProxyForURL(url, host) {Most schools districts are using Chrome, so we’ll cover what Chrome feeds to the url and host variables.Using the example of https://www.example.com/some/path, these two variables will hold the following values:url = https://www.example.com/host = www.example.comNotice the path is not included in either variable. This is due to Google making a decision to remove this path information due to “security concerns.” Using URL path information in a PAC file will have negative results on Chrome clients.Dots are NOT wildcard charactersIn Zscaler, preceeding dots such as the one in .example.com, are typically used as wildcard characters. In PAC files, this isn’t the case. Dots are simply dots, therefore .example.com does NOT match example.com. It does match www.example.com, however. So here are some things to note:When matching a subdomainTypically, when you are matching a subdomain, you want to match it specifically. When matching subdomain.example.comyou’ll use the following:if (dnsDomainIs(host, \"subdomain.example.com\")) return \"DIRECT\"; // good exampleIf you add a preceeding dot to this hostname, it will not match due to the full .subdomain.example.com string not being in the host variable. For example, the following will not match subdomain.example.com:if (dnsDomainIs(host, \".subdomain.example.com\")) return \"DIRECT\"; //bad exampleWhen matching a domain without a subdomainWhen matching a domain that has no subdomain, you’ll have to leave off the preceeding dot, like so:if (dnsDomainIs(host, \"example.com\")) return \"DIRECT\";Keep in mind that this may open up problems, such as a site like xxxexample.com, which would definitely be a problem. Technically, this entry would also match www.example.com.How to eliminate the “dot, no dot” issueIf you add a preceeding dot to the host variable at the top of the PAC file, you will only need the .example.com entries.For example:function FindProxyForURL(url, host) { host = \".\"+host.toLowerCase()This will make the host variable for www.example.com &amp; example.com look like the following respectively:host = .www.example.comhost = .example.comSo as you can see, the following rule would match either example:if (dnsDomainIs(host, \".example.com\")) return \"DIRECT\";And this rule would still match the subdomain rule, if you need to be specific:if (dnsDomainIs(host, \"www.example.com\")) return \"DIRECT\";Alternative resolution to the “no dot” issueYou can also use regular expressions, also known as regex, to match domains without matching potentially bad sites. This is only recommended if you have indepth knowledge of regex. For example to match example.com and not xxxexample.com,you would use the following:if (/^(.+\\.)?example\\.com$/.test(host)) return \"DIRECT\";" }, { "title": "Allowing Wifi Calling", "url": "/posts/allowing-wifi-calling/", "categories": "Networking, Firewall", "tags": "networking, wifi calling, cell phone", "date": "2020-12-13 23:00:00 -0500", "snippet": "Cell phone coverage can be spotty in some areas, as we all know. This is especially true in old concrete-walled buildings. Since most, if not all, educational institutions today have a wireless inf...", "content": "Cell phone coverage can be spotty in some areas, as we all know. This is especially true in old concrete-walled buildings. Since most, if not all, educational institutions today have a wireless infrastructure, we have a way of mitigating this problem. Through a feature called wifi calling, we can allow users to make and receive phone calls using the local internet infrastructure. This is especially important for possible emergency situations where someone may not have immediate access to a landline.There is a slight problem with this, however. Allowing wifi calling requires allowing UDP ports 500 &amp; 4500 out of your network. If you don’t recognize these ports, they are standard ports for VPN protocols. Yes, those pesky applications that allow students to bypass your filtering system. Below, we’ll discuss what exactly is needed to allow wifi calling without allowing VPN applications.What are the destinationsWe have to determine where the traffic is going so that we can limit where the needed ports can go. Below are the known hostnames for the major carriers: Verizon AT&amp;T T-Mobile US Cellular wo.vzwwo.com epdg.epc.att.net 208.54.0.0/17 198.230.224.0/20 What rules are needed in the firewallNow that we have the destinations, and we know the ports are UDP 500 &amp; 4500, we can add rules to the firewall to allow these connections out. Before you begin, its important that your firewall can resolve hostnames. If you have access to your firewall, try pinging one of the above addresses from the firewall itself. If the hostname resolves, you may continue, otherwise you’ll need to address this issue.Essentially, you need to create a UDP service/port group and add port 500 (also known as isakmp) as well as 4500 to it. Also, create objects for the Wifi Calling destinations in the table above and add them to a group. You can then add a rule in your firewall policy, allowing traffic out on these ports to the needed destinations. As long as you are not allowing these ports to flow in another rule, VPN should remain blocked and Wifi Calling should now be usable.You may want to add a source subnet for where you want Wifi calls to be made from, such as a certain Wifi network where cell phones will be connecting. A typical Wifi call will use less than 250Kbps, most times much less. Bandwidth shouldn’t be a concern when deciding whether to allow Wifi calling on your network." }, { "title": "Network Throughput Testing with iPerf", "url": "/posts/throughput-testing/", "categories": "Networking, Troubleshooting", "tags": "networking, iperf, bandwidth, throughput, troubleshooting", "date": "2020-08-23 17:31:00 -0400", "snippet": "Should you want to test your througput between two points in your network, you’ll need a tool like iPerf to do so. This guide will show you how to get the client and server up and running, as well ...", "content": "Should you want to test your througput between two points in your network, you’ll need a tool like iPerf to do so. This guide will show you how to get the client and server up and running, as well as demonstrate the proper usage.When running a throughput test, you’ll want to be as close as possible to the path you’re testing as you canbe. For instance, if you’re testing the WAN link between your CO and a remote school, you”ll want to be just behind the core switch/router at each location. Avoid “obstacles” such as VoIP phones or other devices that could impact actual results. You’ll also want to avoid running iPerf on a virtual machine, as the virtual networking stack will likely affect your results.iPerf3 InstallationWindows 10 / ServerVisit this page and download the latest version for Windows, which is 3.9 as of this writing. Once the zip file is downloaded, right click the file and click Extract All. Follow the Windows extraction wizard and note where you’ve extracted the files, such as C:\\Users\\&lt;yourname&gt;\\Downloads\\.macOSIf you’re on macOS, the easiest method to get iPerf is to install Homebrew by following the instructions here. Once Homebrew is installed, you’ll run the following from the Terminal app:$ brew install iperf3LinuxOn Linux, you can install iPerf right from the package manager.Fedora / CentOS / Redhat$ sudo dnf install -y iperf3Ubuntu / Debian$ sudo apt install -y iperf3Starting Up the ServerYou’ll likely want to run the iPerf server on a device that you can leave stationary, such as a server, workstation or even a laptop located in your main server room. If this will be a permanent server, assigning a static IP address will ensure you always know where to find it on the network.WindowsOpen up cmd.exe1 and type the full path to the location where you extracted iPerf to earlier, using the -s option to start the server.&gt; 'C:\\Users\\mcnc\\Downloads\\iperf3.9_64\\iperf3.exe' -sAt this point you may see the firewall warning below. This is normal, as you need to allow access to the port on the device where iPerf is running. By default, this is port 5201/tcp. Simply click Allow access on this warning.macOS / LinuxOpen a terminal session, and then run iPerf with the -s option.$ iperf3 -sOn macOS, you may see the following firewall warning. This is normal, as you need to allow access to the port on the device where iPerf is running. By default, this is port 5201/tcp. Simply click Allow on this warning.If you see the following output, the server is running and listening on port 5201.-----------------------------------------------------------Server listening on 5201-----------------------------------------------------------Starting a Throughput Test on the ClientDownload or install like we covered earlier. iPerf, by default, sends data to the server. This is your upload, or outbound, throughput. For the internal network, this may be sufficient for your tests. We’ll cover the “reverse,” or inbound, test in a moment.WindowsOpen up cmd.exe1 and type the full path to the location where you extracted iPerf to earlier, using the -c option to start the throughput test. In this instance, our server is 192.168.0.10. The test will run for 10 seconds by default, pushing as much data as possible.&gt; 'C:\\Users\\mcnc\\Downloads\\iperf3.9_64\\iperf3.exe' -c 192.168.0.10macOS / LinuxOpen a terminal session, and then run iPerf with the -c option to start the throughput test. In this instance, our server is 192.168.0.10. The test will run for 10 seconds by default, pushing as much data as possible.$ iperf3 -c 192.168.0.10If you see the following output, the client has successfully completed the test.Connecting to host 192.168.0.9, port 5201[ 5] local 192.0.2.101 port 52985 connected to 192.168.0.9 port 5201[ ID] Interval Transfer Bitrate[ 5] 0.00-1.00 sec 171 MBytes 1.43 Gbits/sec[ 5] 1.00-2.00 sec 178 MBytes 1.50 Gbits/sec[ 5] 2.00-3.00 sec 177 MBytes 1.49 Gbits/sec[ 5] 3.00-4.00 sec 180 MBytes 1.51 Gbits/sec[ 5] 4.00-5.00 sec 180 MBytes 1.51 Gbits/sec[ 5] 5.00-6.00 sec 180 MBytes 1.51 Gbits/sec[ 5] 6.00-7.00 sec 180 MBytes 1.51 Gbits/sec[ 5] 7.00-8.00 sec 180 MBytes 1.51 Gbits/sec[ 5] 8.00-9.00 sec 180 MBytes 1.51 Gbits/sec[ 5] 9.00-10.00 sec 180 MBytes 1.51 Gbits/sec- - - - - - - - - - - - - - - - - - - - - - - - -[ ID] Interval Transfer Bitrate[ 5] 0.00-10.00 sec 1.74 GBytes 1.50 Gbits/sec sender[ 5] 0.00-10.00 sec 1.74 GBytes 1.50 Gbits/sec receiveriperf Done.In this example, the client has sent 1.74 GB of data to the server at a rate of 1.50 Gbits/secPerforming the test in “Reverse”You may have a need to perform the test recieving traffic from the server to the client. This would be considered a download, or inbound test. To do this, we append the -R option to the command, as demonstrated below.$ iperf3 -c 192.168.0.10 -RConnecting to host 192.168.0.9, port 5201Reverse mode, remote host 192.168.0.9 is sending[ 5] local 192.0.2.101 port 52999 connected to 192.168.0.9 port 5201[ ID] Interval Transfer Bitrate[ 5] 0.00-1.01 sec 14.4 MBytes 119 Mbits/sec[ 5] 1.01-2.00 sec 310 MBytes 2.63 Gbits/sec[ 5] 2.00-3.00 sec 394 MBytes 3.31 Gbits/sec[ 5] 3.00-4.00 sec 461 MBytes 3.87 Gbits/sec[ 5] 4.00-5.00 sec 438 MBytes 3.68 Gbits/sec[ 5] 5.00-6.00 sec 473 MBytes 3.97 Gbits/sec[ 5] 6.00-7.00 sec 449 MBytes 3.77 Gbits/sec[ 5] 7.00-8.00 sec 467 MBytes 3.91 Gbits/sec[ 5] 8.00-9.00 sec 377 MBytes 3.16 Gbits/sec[ 5] 9.00-10.00 sec 392 MBytes 3.28 Gbits/sec- - - - - - - - - - - - - - - - - - - - - - - - -[ ID] Interval Transfer Bitrate[ 5] 0.00-10.01 sec 3.69 GBytes 3.16 Gbits/sec sender[ 5] 0.00-10.00 sec 3.69 GBytes 3.17 Gbits/sec receiveriperf Done.Performing a Test Through Your FirewallIf you are a member of the NCREN Community and need to perform an iPerf test through your firewall, contact MCNC Support. Performing an outbound test from a client behind your firewall will require an entry in the inside ACL2 on your firewall for port 5201/tcp. Likewise, an inbound test will require a NAT3 between an external address and your client device. You will also need to allow port 201/tcp inbound to the client with an entry in the outside ACL on the firewall as well.Footnotes Hold the Windows key on the keyboard and press R. Type cmd.exe in the Run window, then press enter. &#8617; &#8617;2 Access Control Entry &#8617; Network Address Translation &#8617; " }, { "title": "Capture Packets on iOS Devices", "url": "/posts/ios-packet-capture/", "categories": "Networking, Wireshark", "tags": "networking, wireshark, apple, ios, troubleshooting", "date": "2020-08-21 01:11:00 -0400", "snippet": "From time to time you may need to gather some information about what an iOS device is doing on your network. For instance, you may need to know what URLs an app is using so it can be bypassed in yo...", "content": "From time to time you may need to gather some information about what an iOS device is doing on your network. For instance, you may need to know what URLs an app is using so it can be bypassed in your content filter.Before you begin, you need: MacBook with Wireshark &amp; Xcode installed iOS device with cable to attach to the MacBookYou’ll need the UDID of you iOS device, so plug it into you MacBook and open finder. You should see the device in the left-hand pane. Click on it, then click on the device’s description at the top.This will display the serial number and UDID. Right click the UDID and click Copy UDID.Now that you have the UDID, open the Terminal app and use this command to create the interface we’ll use to capture packets.$ rvictl -s PASTE-YOUR-UDID-HEREIf successful, you should see your new interface on screen. In most instances, it will be rvi0 as seen below.Starting device 00000000-0000000000000000 [SUCCEEDED] with interface rvi0Now open Wireshark, and you should see this new interface listed as a capture option.You can now proceed as you normally would with the capture filter of your choosing." } ]
